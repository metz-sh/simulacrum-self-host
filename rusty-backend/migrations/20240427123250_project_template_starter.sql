INSERT INTO public.project_templates (id, name, description, created_at, updated_at, project_art, project_artifacts) VALUES (2, 'Hello World!', 'Prints "Hello world!", how hard could that be?', '2024-08-13 14:35:33.550198', '2024-08-13 14:35:33.550198', '{"iconString": "twemoji:waving-hand", "iconColorVariant": "dark"}', '{"build": {"state": "built", "artificats": {"bundle": "class Main {\n    /**\n     * Is reponsible for many important things.\n    */\n    async *hello() {\n        var __90991_metz_context = arguments[arguments.length - 1];\n        [] = yield { command: \"load\", startingAddress: this.__starting_address, offset: \"hello\", params: Array.from(arguments).slice(0, arguments.length-1), context: __90991_metz_context };\n        const result = (yield * this.world(''Hello'', { isDependency: true, flowId: __90991_metz_context.flowId }));\n        yield { command: \"log\", startingAddress: this.__starting_address, offset: \"hello\", logs: [result] };\n        return yield { command: \"unload\", startingAddress: this.__starting_address, offset: \"hello\", returnValue: undefined };\n    }\n    /**\n     * Does all the heavy lifting!\n    */\n    async *world(arg) {\n        var __90991_metz_context = arguments[arguments.length - 1];\n        [arg] = yield { command: \"load\", startingAddress: this.__starting_address, offset: \"world\", params: Array.from(arguments).slice(0, arguments.length-1), context: __90991_metz_context };\n        return yield { command: \"unload\", startingAddress: this.__starting_address, offset: \"world\", returnValue: `${arg} World!` };\n    }\n    constructor() {\n        __runtime.registerInstance(this);\n    }\n}\n\n({\n                    classyKeywords: [{\n                        className: ''Main'',\n                        properties: [],\n                        comment: ``,\n                        flags: {\"isMarked\":true,\"isHidden\":false,\"isConstructorBased\":true},\n                        filePath: ''app/main.ts'',\n                        methods: [{\"methodName\":\"hello\",\"comment\":\"Is reponsible for many important things.\",\"signature\":\"() => void\",\"parameters\":[],\"returnType\":\"void\",\"flags\":{\"isMarked\":true,\"isHidden\":false,\"delegateToParent\":false}},{\"methodName\":\"world\",\"comment\":\"Does all the heavy lifting!\",\"signature\":\"(arg: string) => string\",\"parameters\":[{\"name\":\"arg\",\"type\":\"string\",\"text\":\"arg: string\"}],\"returnType\":\"string\",\"flags\":{\"isMarked\":true,\"isHidden\":false,\"delegateToParent\":false}}],\n                        class: Main,\n                    }]\n                })", "keywords": [{"flags": {"isHidden": false, "isMarked": true, "isConstructorBased": true}, "comment": "", "methods": [{"flags": {"isHidden": false, "isMarked": true, "delegateToParent": false}, "comment": "Is reponsible for many important things.", "signature": "() => void", "methodName": "hello", "parameters": [], "returnType": "void"}, {"flags": {"isHidden": false, "isMarked": true, "delegateToParent": false}, "comment": "Does all the heavy lifting!", "signature": "(arg: string) => string", "methodName": "world", "parameters": [{"name": "arg", "text": "arg: string", "type": "string"}], "returnType": "string"}], "filePath": "app/main.ts", "className": "Main", "properties": [], "channelEmitters": [], "typeParametersLength": 0}], "projectVersion": 65, "callHierarchyContainer": [{"source": {"id": "Mainhello", "isHidden": false, "className": "Main", "methodName": "hello"}, "destination": {"id": "Mainworld", "isHidden": false, "className": "Main", "methodName": "world"}}]}, "isDifferentThanBefore": true}, "display": {"resolutionNodeMap": {"LOW": {}, "HIGH": {"9f9b7795568ca10fef04d7521cb87ed5_1": {"style": {"width": "1000px", "height": "595.2222222222222px"}, "position": {"x": 12, "y": 12}}, "9f9b7795568ca10fef04d7521cb87ed5_1hello": {"style": {"width": "300px", "height": "356.22222222222223px"}, "position": {"x": 100, "y": 130}}, "9f9b7795568ca10fef04d7521cb87ed5_1world": {"style": {"width": "300px", "height": "375.22222222222223px"}, "position": {"x": 600, "y": 120}}}, "MEDIUM": {}}}, "project": [{"path": "app/main.ts", "type": "file", "value": "class Main {\n    /** \n     * Is reponsible for many important things.\n    */\n    hello() {\n        const result = this.world(''Hello'');\n        std.log(result);\n    }\n\n    /** \n     * Does all the heavy lifting!\n    */\n    world(arg: string) {\n        return `${arg} World!`\n    }\n}"}], "storySetups": [{"id": "0", "title": "Our first story", "script": {"raw": "const main = new Main();\nstd.flow(''Our first flow!'', main).hello().run();", "compiled": "var main = new Main();\nstd.flow(''Our first flow!'', main).hello().run();\n"}, "edgeMap": {}, "resolutionNodeMap": {"LOW": {"9f9b7795568ca10fef04d7521cb87ed5_1": {"iconData": {"iconString": "skill-icons:typescript", "iconColorVariant": "dark"}}, "9f9b7795568ca10fef04d7521cb87ed5_1hello": {"iconData": {"iconString": "noto-v1:waving-hand", "iconColorVariant": "dark"}}, "9f9b7795568ca10fef04d7521cb87ed5_1world": {"iconData": {"iconString": "flat-color-icons:globe", "iconColorVariant": "dark"}}}, "HIGH": {"9f9b7795568ca10fef04d7521cb87ed5_1": {"iconData": {"iconString": "skill-icons:typescript", "iconColorVariant": "dark"}}, "9f9b7795568ca10fef04d7521cb87ed5_1hello": {"iconData": {"iconString": "noto-v1:waving-hand", "iconColorVariant": "dark"}}, "9f9b7795568ca10fef04d7521cb87ed5_1world": {"iconData": {"iconString": "flat-color-icons:globe", "iconColorVariant": "dark"}}}, "MEDIUM": {"9f9b7795568ca10fef04d7521cb87ed5_1": {"iconData": {"iconString": "skill-icons:typescript", "iconColorVariant": "dark"}}, "9f9b7795568ca10fef04d7521cb87ed5_1hello": {"iconData": {"iconString": "noto-v1:waving-hand", "iconColorVariant": "dark"}}, "9f9b7795568ca10fef04d7521cb87ed5_1world": {"iconData": {"iconString": "flat-color-icons:globe", "iconColorVariant": "dark"}}}}}]}');
INSERT INTO public.project_templates (id, name, description, created_at, updated_at, project_art, project_artifacts) VALUES (3, 'Naive Auto Scaler', 'A simple(truly) auto scaler design, which introduces: Dependency Injection, Private methods', '2024-08-13 17:17:52.915928', '2024-08-13 17:17:52.915928', '{"iconString": "carbon:load-balancer-pool", "iconColorVariant": "dark"}', '{"build": {"state": "built", "artificats": {"bundle": "class LoadBalancer {\n    async *handleRequest() {\n        var __90991_metz_context = arguments[arguments.length - 1];\n        [] = yield { command: \"load\", startingAddress: this.__starting_address, offset: \"handleRequest\", params: Array.from(arguments).slice(0, arguments.length-1), context: __90991_metz_context };\n        const server = (yield * this.serverPool.getServer({ isDependency: true, flowId: __90991_metz_context.flowId }));\n        (yield * server.handleRequest({ isDependency: false, flowId: __90991_metz_context.flowId }));\n        return yield { command: \"unload\", startingAddress: this.__starting_address, offset: \"handleRequest\", returnValue: undefined };\n    }\n    constructor() {\n        this.serverPool = std.resolve(ServerPool);\n        __runtime.registerInstance(this);\n    }\n}\n/**\n * A self managing pool of servers.\n*/\nclass ServerPool {\n    /**\n     * Find an available server, if not found, then allocate one.\n    */\n    async *getServer() {\n        var __90991_metz_context = arguments[arguments.length - 1];\n        [] = yield { command: \"load\", startingAddress: this.__starting_address, offset: \"getServer\", params: Array.from(arguments).slice(0, arguments.length-1), context: __90991_metz_context };\n        const availableServer = this.findAvailableServer();\n        if (availableServer) {\n            this.servers.set(availableServer.server, availableServer.requestCount + 1);\n            return yield { command: \"unload\", startingAddress: this.__starting_address, offset: \"getServer\", returnValue: availableServer.server };\n        }\n        yield { command: \"log\", startingAddress: this.__starting_address, offset: \"getServer\", logs: [''Could not find a server!'', ''Allocating new one.''] };\n        return yield { command: \"unload\", startingAddress: this.__starting_address, offset: \"getServer\", returnValue: (yield * this.allocateNewServer({ isDependency: true, flowId: __90991_metz_context.flowId })) };\n    }\n    async *allocateNewServer() {\n        var __90991_metz_context = arguments[arguments.length - 1];\n        [] = yield { command: \"load\", startingAddress: this.__starting_address, offset: \"allocateNewServer\", params: Array.from(arguments).slice(0, arguments.length-1), context: __90991_metz_context };\n        const newServer = new Server();\n        this.servers.set(newServer, 0);\n        return yield { command: \"unload\", startingAddress: this.__starting_address, offset: \"allocateNewServer\", returnValue: newServer };\n    }\n    /**\n     * This is a private method, it won''t show up in preview and playground.\n     * It''s also skipped by the compiler when parsing and hence is left untouched.\n    */\n    findAvailableServer() {\n        const servers = Array.from(this.servers, ([server, rc]) => ({ server, requestCount: rc }));\n        const availableServer = servers.find(server => server.requestCount < this.MAX_REQUESTS_PER_SERVER);\n        return availableServer;\n    }\n    constructor() {\n        this.MAX_REQUESTS_PER_SERVER = 1;\n        this.servers = new Map()\n            .set(new Server(), 0);\n        __runtime.registerInstance(this);\n    }\n}\nclass Server {\n    async *handleRequest() {\n        var __90991_metz_context = arguments[arguments.length - 1];\n        [] = yield { command: \"load\", startingAddress: this.__starting_address, offset: \"handleRequest\", params: Array.from(arguments).slice(0, arguments.length-1), context: __90991_metz_context };\n        return yield { command: \"unload\", startingAddress: this.__starting_address, offset: \"handleRequest\", returnValue: undefined };\n    }\n    constructor() {\n        __runtime.registerInstance(this);\n    }\n}\n\n({\n                    classyKeywords: [{\n                        className: ''LoadBalancer'',\n                        properties: [{\"name\":\"serverPool\",\"show\":false}],\n                        comment: ``,\n                        flags: {\"isMarked\":true,\"isHidden\":false,\"isConstructorBased\":false},\n                        filePath: ''app/load-balancer.ts'',\n                        methods: [{\"methodName\":\"handleRequest\",\"comment\":\"\",\"signature\":\"() => void\",\"parameters\":[],\"returnType\":\"void\",\"flags\":{\"isMarked\":true,\"isHidden\":false,\"delegateToParent\":false}}],\n                        class: LoadBalancer,\n                    },{\n                        className: ''ServerPool'',\n                        properties: [{\"name\":\"MAX_REQUESTS_PER_SERVER\",\"show\":false},{\"name\":\"servers\",\"show\":false}],\n                        comment: `A self managing pool of servers.`,\n                        flags: {\"isMarked\":true,\"isHidden\":false,\"isConstructorBased\":false},\n                        filePath: ''app/server realm/server-pool.ts'',\n                        methods: [{\"methodName\":\"getServer\",\"comment\":\"Find an available server, if not found, then allocate one.\",\"signature\":\"() => Server\",\"parameters\":[],\"returnType\":\"Server\",\"flags\":{\"isMarked\":true,\"isHidden\":false,\"delegateToParent\":false}},{\"methodName\":\"allocateNewServer\",\"comment\":\"\",\"signature\":\"() => Server\",\"parameters\":[],\"returnType\":\"Server\",\"flags\":{\"isMarked\":true,\"isHidden\":false,\"delegateToParent\":false}},{\"methodName\":\"findAvailableServer\",\"comment\":\"This is a private method, it won''t show up in preview and playground.\\nIt''s also skipped by the compiler when parsing and hence is left untouched.\",\"signature\":\"() => { server: Server; requestCount: number; } | undefined\",\"parameters\":[],\"returnType\":\"{ server: Server; requestCount: number; } | undefined\",\"flags\":{\"isMarked\":false,\"isHidden\":false,\"delegateToParent\":false}}],\n                        class: ServerPool,\n                    },{\n                        className: ''Server'',\n                        properties: [],\n                        comment: ``,\n                        flags: {\"isMarked\":true,\"isHidden\":false,\"isConstructorBased\":true},\n                        filePath: ''app/server realm/server.ts'',\n                        methods: [{\"methodName\":\"handleRequest\",\"comment\":\"\",\"signature\":\"() => void\",\"parameters\":[],\"returnType\":\"void\",\"flags\":{\"isMarked\":true,\"isHidden\":false,\"delegateToParent\":false}}],\n                        class: Server,\n                    }]\n                })", "keywords": [{"flags": {"isHidden": false, "isMarked": true, "isConstructorBased": false}, "comment": "", "methods": [{"flags": {"isHidden": false, "isMarked": true, "delegateToParent": false}, "comment": "", "signature": "() => void", "methodName": "handleRequest", "parameters": [], "returnType": "void"}], "filePath": "app/load-balancer.ts", "className": "LoadBalancer", "properties": [{"name": "serverPool", "show": false}], "channelEmitters": [], "typeParametersLength": 0}, {"flags": {"isHidden": false, "isMarked": true, "isConstructorBased": false}, "comment": "A self managing pool of servers.", "methods": [{"flags": {"isHidden": false, "isMarked": true, "delegateToParent": false}, "comment": "Find an available server, if not found, then allocate one.", "signature": "() => Server", "methodName": "getServer", "parameters": [], "returnType": "Server"}, {"flags": {"isHidden": false, "isMarked": true, "delegateToParent": false}, "comment": "", "signature": "() => Server", "methodName": "allocateNewServer", "parameters": [], "returnType": "Server"}, {"flags": {"isHidden": false, "isMarked": false, "delegateToParent": false}, "comment": "This is a private method, it won''t show up in preview and playground.\nIt''s also skipped by the compiler when parsing and hence is left untouched.", "signature": "() => { server: Server; requestCount: number; } | undefined", "methodName": "findAvailableServer", "parameters": [], "returnType": "{ server: Server; requestCount: number; } | undefined"}], "filePath": "app/server realm/server-pool.ts", "className": "ServerPool", "properties": [{"name": "MAX_REQUESTS_PER_SERVER", "show": false}, {"name": "servers", "show": false}], "channelEmitters": [], "typeParametersLength": 0}, {"flags": {"isHidden": false, "isMarked": true, "isConstructorBased": true}, "comment": "", "methods": [{"flags": {"isHidden": false, "isMarked": true, "delegateToParent": false}, "comment": "", "signature": "() => void", "methodName": "handleRequest", "parameters": [], "returnType": "void"}], "filePath": "app/server realm/server.ts", "className": "Server", "properties": [], "channelEmitters": [], "typeParametersLength": 0}], "projectVersion": 56, "callHierarchyContainer": [{"source": {"id": "LoadBalancerhandleRequest", "isHidden": false, "className": "LoadBalancer", "methodName": "handleRequest"}, "destination": {"id": "ServerPoolgetServer", "isHidden": false, "className": "ServerPool", "methodName": "getServer"}}, {"source": {"id": "LoadBalancerhandleRequest", "isHidden": false, "className": "LoadBalancer", "methodName": "handleRequest"}, "destination": {"id": "ServerhandleRequest", "isHidden": false, "className": "Server", "methodName": "handleRequest"}}, {"source": {"id": "ServerPoolgetServer", "isHidden": false, "className": "ServerPool", "methodName": "getServer"}, "destination": {"id": "ServerPoolallocateNewServer", "isHidden": false, "className": "ServerPool", "methodName": "allocateNewServer"}}]}, "isDifferentThanBefore": false}, "display": {"resolutionNodeMap": {"LOW": {"9f9b7795568ca10fef04d7521cb87ed5_1": {"style": {"width": "500px", "height": "221px"}, "position": {"x": 12, "y": 12}}, "9f9b7795568ca10fef04d7521cb87ed5_1hello": {"style": {"width": "300px", "height": "356.22222222222223px"}, "position": {"x": 100, "y": 130}}, "9f9b7795568ca10fef04d7521cb87ed5_1world": {"style": {"width": "300px", "height": "375.22222222222223px"}, "position": {"x": 600, "y": 120}}}, "HIGH": {"server realm": {"style": {"width": "1325px", "height": "2178px"}, "position": {"x": 962, "y": 12}}, "0bbc328fd951004b26529e186576d7da_1": {"style": {"width": "500px", "height": "571.7777777777778px", "borderColor": "rgba(255, 186, 15, 0.65)", "backgroundColor": "rgba(250, 176, 5, 0.1)"}, "position": {"x": 12, "y": 804}}, "1d0094f1d1b41ca18c81d779a77374b6_1": {"style": {"width": "500px", "height": "571.7777777777778px", "borderColor": "rgba(131, 90, 252, 0.65)", "backgroundColor": "rgba(121, 80, 242, 0.1)"}, "position": {"x": 225, "y": 792}}, "1d0094f1d1b41ca18c81d779a77374b6_2": {"style": {"width": "500px", "height": "571.7777777777778px"}, "position": {"x": 225, "y": 120}}, "7b9ec837c61a99217b3a7a34f9db3939_1": {"style": {"width": "1000px", "height": "614px", "borderColor": "rgba(44, 149, 240, 0.65)", "backgroundColor": "rgba(34, 139, 230, 0.1)"}, "position": {"x": 225, "y": 1464}}, "7b9ec837c61a99217b3a7a34f9db3939_1getServer": {"style": {"width": "300px", "height": "394px"}, "position": {"x": 100, "y": 120}}, "0bbc328fd951004b26529e186576d7da_1handleRequest": {"style": {"width": "300px", "height": "351.77777777777777px"}, "position": {"x": 100, "y": 120}}, "1d0094f1d1b41ca18c81d779a77374b6_1handleRequest": {"style": {"width": "300px", "height": "351.77777777777777px"}, "position": {"x": 100, "y": 120}}, "1d0094f1d1b41ca18c81d779a77374b6_2handleRequest": {"style": {"width": "300px", "height": "351.77777777777777px"}, "position": {"x": 100, "y": 120}}, "7b9ec837c61a99217b3a7a34f9db3939_1allocateNewServer": {"style": {"width": "300px", "height": "371.55555555555554px"}, "position": {"x": 600, "y": 131}}}, "MEDIUM": {"9f9b7795568ca10fef04d7521cb87ed5_1": {"style": {"width": "500px", "height": "221px"}, "position": {"x": 12, "y": 12}}, "9f9b7795568ca10fef04d7521cb87ed5_1hello": {"style": {"width": "300px", "height": "356.22222222222223px"}, "position": {"x": 100, "y": 130}}, "9f9b7795568ca10fef04d7521cb87ed5_1world": {"style": {"width": "300px", "height": "375.22222222222223px"}, "position": {"x": 600, "y": 120}}}}}, "project": [{"path": "app/load-balancer.ts", "type": "file", "value": "@Injectable\nclass LoadBalancer {\n    serverPool = std.resolve(ServerPool);\n\n    handleRequest() {\n        const server = this.serverPool.getServer();\n        server.handleRequest();\n    }\n}"}, {"path": "app/server realm/server-pool.ts", "type": "file", "value": "/** \n * A self managing pool of servers.\n*/\n@Injectable\nclass ServerPool {\n    public MAX_REQUESTS_PER_SERVER = 1;\n    public servers = new Map<Server, number>()\n    .set(new Server(), 0);\n\n    /** \n     * Find an available server, if not found, then allocate one.\n    */\n    getServer() {\n        const availableServer = this.findAvailableServer();\n        if(availableServer) {\n            this.servers.set(availableServer.server, availableServer.requestCount + 1);\n            return availableServer.server;\n        }\n\n        std.log(''Could not find a server!'', ''Allocating new one.'');\n        return this.allocateNewServer();\n    }\n\n    allocateNewServer() {\n        const newServer = new Server();\n        this.servers.set(newServer, 0);\n\n        return newServer;\n    }\n    \n    /** \n     * This is a private method, it won''t show up in preview and playground.\n     * It''s also skipped by the compiler when parsing and hence is left untouched.\n    */\n    private findAvailableServer() {\n        const servers = Array.from(this.servers, ([server, rc]) => ({server, requestCount: rc}));\n        const availableServer = servers.find(server => server.requestCount < this.MAX_REQUESTS_PER_SERVER);\n\n        return availableServer;\n    }\n    \n}"}, {"path": "app/server realm/server.ts", "type": "file", "value": "class Server {\n    handleRequest() {\n\n    }\n}"}], "storySetups": [{"id": "0", "title": "Allocate new", "script": {"raw": "const lb = std.resolve(LoadBalancer);\nstd.flow(''Process first request'', lb).handleRequest().run();\nstd.flow(''Process second request'', lb, { after: 3 }).handleRequest();", "compiled": "var lb = std.resolve(LoadBalancer);\nstd.flow(''Process first request'', lb).handleRequest().run();\nstd.flow(''Process second request'', lb, { after: 3 }).handleRequest();\n"}, "edgeMap": {}, "resolutionNodeMap": {"LOW": {"server realm": {"iconData": {"iconString": "logos:aws-ec2", "iconColorVariant": "dark"}}, "0bbc328fd951004b26529e186576d7da_1": {"iconData": {"iconString": "logos:aws-elb", "iconColorVariant": "dark"}, "backgroundColor": "#fab005"}, "1d0094f1d1b41ca18c81d779a77374b6_1": {"backgroundColor": "#7950f2"}, "1d0094f1d1b41ca18c81d779a77374b6_2": {"backgroundColor": "#7950f2"}, "7b9ec837c61a99217b3a7a34f9db3939_1": {"backgroundColor": "#228be6"}, "9f9b7795568ca10fef04d7521cb87ed5_1": {"iconData": {"iconString": "skill-icons:typescript", "iconColorVariant": "dark"}}, "9f9b7795568ca10fef04d7521cb87ed5_1hello": {"iconData": {"iconString": "noto-v1:waving-hand", "iconColorVariant": "dark"}}, "9f9b7795568ca10fef04d7521cb87ed5_1world": {"iconData": {"iconString": "flat-color-icons:globe", "iconColorVariant": "dark"}}, "7b9ec837c61a99217b3a7a34f9db3939_1getServer": {"iconData": {"iconString": "tabler:http-get", "iconColorVariant": "dark"}}, "0bbc328fd951004b26529e186576d7da_1handleRequest": {"iconData": {"iconString": "tabler:load-balancer", "iconColorVariant": "dark"}}, "7b9ec837c61a99217b3a7a34f9db3939_1allocateNewServer": {"iconData": {"iconString": "tabler:http-put", "iconColorVariant": "dark"}}}, "HIGH": {"server realm": {"iconData": {"iconString": "logos:aws-ec2", "iconColorVariant": "dark"}}, "0bbc328fd951004b26529e186576d7da_1": {"iconData": {"iconString": "logos:aws-elb", "iconColorVariant": "dark"}, "backgroundColor": "#fab005"}, "1d0094f1d1b41ca18c81d779a77374b6_1": {"backgroundColor": "#7950f2"}, "1d0094f1d1b41ca18c81d779a77374b6_2": {"backgroundColor": "#7950f2"}, "7b9ec837c61a99217b3a7a34f9db3939_1": {"backgroundColor": "#228be6"}, "9f9b7795568ca10fef04d7521cb87ed5_1": {"iconData": {"iconString": "skill-icons:typescript", "iconColorVariant": "dark"}}, "9f9b7795568ca10fef04d7521cb87ed5_1hello": {"iconData": {"iconString": "noto-v1:waving-hand", "iconColorVariant": "dark"}}, "9f9b7795568ca10fef04d7521cb87ed5_1world": {"iconData": {"iconString": "flat-color-icons:globe", "iconColorVariant": "dark"}}, "7b9ec837c61a99217b3a7a34f9db3939_1getServer": {"iconData": {"iconString": "tabler:http-get", "iconColorVariant": "dark"}}, "0bbc328fd951004b26529e186576d7da_1handleRequest": {"iconData": {"iconString": "tabler:load-balancer", "iconColorVariant": "dark"}}, "7b9ec837c61a99217b3a7a34f9db3939_1allocateNewServer": {"iconData": {"iconString": "tabler:http-put", "iconColorVariant": "dark"}}}, "MEDIUM": {"server realm": {"iconData": {"iconString": "logos:aws-ec2", "iconColorVariant": "dark"}}, "0bbc328fd951004b26529e186576d7da_1": {"iconData": {"iconString": "logos:aws-elb", "iconColorVariant": "dark"}, "backgroundColor": "#fab005"}, "1d0094f1d1b41ca18c81d779a77374b6_1": {"backgroundColor": "#7950f2"}, "1d0094f1d1b41ca18c81d779a77374b6_2": {"backgroundColor": "#7950f2"}, "7b9ec837c61a99217b3a7a34f9db3939_1": {"backgroundColor": "#228be6"}, "9f9b7795568ca10fef04d7521cb87ed5_1": {"iconData": {"iconString": "skill-icons:typescript", "iconColorVariant": "dark"}}, "9f9b7795568ca10fef04d7521cb87ed5_1hello": {"iconData": {"iconString": "noto-v1:waving-hand", "iconColorVariant": "dark"}}, "9f9b7795568ca10fef04d7521cb87ed5_1world": {"iconData": {"iconString": "flat-color-icons:globe", "iconColorVariant": "dark"}}, "7b9ec837c61a99217b3a7a34f9db3939_1getServer": {"iconData": {"iconString": "tabler:http-get", "iconColorVariant": "dark"}}, "0bbc328fd951004b26529e186576d7da_1handleRequest": {"iconData": {"iconString": "tabler:load-balancer", "iconColorVariant": "dark"}}, "7b9ec837c61a99217b3a7a34f9db3939_1allocateNewServer": {"iconData": {"iconString": "tabler:http-put", "iconColorVariant": "dark"}}}}}]}');
INSERT INTO public.project_templates (id, name, description, created_at, updated_at, project_art, project_artifacts) VALUES (6, 'A central Event Bus', 'This introduces event emitters & a type-safe way of doing things!', '2024-08-14 11:35:08.297571', '2024-08-14 11:35:08.297571', '{"iconString": "noto-v1:bus", "iconColorVariant": "dark"}', '{"build": {"state": "built", "artificats": {"bundle": "class EventBus {\n    addTopic(topic) {\n        const emitter = std.createChannelEmitter(topic);\n        this.channels.set(topic, emitter);\n    }\n    async *registerForTopic(topic, listener) {\n        var __90991_metz_context = arguments[arguments.length - 1];\n        [topic, listener] = yield { command: \"load\", startingAddress: this.__starting_address, offset: \"registerForTopic\", params: Array.from(arguments).slice(0, arguments.length-1), context: __90991_metz_context };\n        // There''s an issue of compiler eagerly parsing all the slugs and their types.\n        // For now, we have to use the ''any'' escape hatch.\n        std.registerChannelListener(topic, listener);\n        const topicRecord = this.listeners.find(r => r.topic === topic);\n        if (topicRecord) {\n            topicRecord.count++;\n        }\n        else {\n            this.listeners.push({ topic, count: 1 });\n        }\n        return yield { command: \"unload\", startingAddress: this.__starting_address, offset: \"registerForTopic\", returnValue: undefined };\n    }\n    async *emit(topic, data) {\n        var __90991_metz_context = arguments[arguments.length - 1];\n        [topic, data] = yield { command: \"load\", startingAddress: this.__starting_address, offset: \"emit\", params: Array.from(arguments).slice(0, arguments.length-1), context: __90991_metz_context };\n        const emitter = this.channels.get(topic);\n        if (!emitter) {\n            yield { command: \"log\", startingAddress: this.__starting_address, offset: \"emit\", logs: [`Topic ${topic} not found!`] };\n            return yield { command: \"unload\", startingAddress: this.__starting_address, offset: \"emit\", returnValue: undefined };\n        }\n        emitter.emit(data);\n        return yield { command: \"unload\", startingAddress: this.__starting_address, offset: \"emit\", returnValue: undefined };\n    }\n    constructor() {\n        this.listeners = [];\n        this.channels = new Map();\n        __runtime.registerInstance(this);\n        this.addTopic(\"USER_LOGS_IN\" /* Topic.USER_LOGS_IN */);\n        this.addTopic(\"USER_UNINSTALLS\" /* Topic.USER_UNINSTALLS */);\n    }\n}\nclass LoginComponent {\n    async *login() {\n        var __90991_metz_context = arguments[arguments.length - 1];\n        [] = yield { command: \"load\", startingAddress: this.__starting_address, offset: \"login\", params: Array.from(arguments).slice(0, arguments.length-1), context: __90991_metz_context };\n        (yield * this.eventBus.emit(\"USER_LOGS_IN\" /* Topic.USER_LOGS_IN */, { login_at: std.currentTick() }, { isDependency: false, flowId: __90991_metz_context.flowId }));\n        return yield { command: \"unload\", startingAddress: this.__starting_address, offset: \"login\", returnValue: undefined };\n    }\n    constructor() {\n        this.eventBus = std.resolve(EventBus);\n        __runtime.registerInstance(this);\n    }\n}\nclass UninstallMonitorComponent {\n    async *uninstall() {\n        var __90991_metz_context = arguments[arguments.length - 1];\n        [] = yield { command: \"load\", startingAddress: this.__starting_address, offset: \"uninstall\", params: Array.from(arguments).slice(0, arguments.length-1), context: __90991_metz_context };\n        (yield * this.eventBus.emit(\"USER_UNINSTALLS\" /* Topic.USER_UNINSTALLS */, { uninstalled_at: std.currentTick() }, { isDependency: false, flowId: __90991_metz_context.flowId }));\n        return yield { command: \"unload\", startingAddress: this.__starting_address, offset: \"uninstall\", returnValue: undefined };\n    }\n    constructor() {\n        this.eventBus = std.resolve(EventBus);\n        __runtime.registerInstance(this);\n    }\n}\nclass EventLogger {\n    async *register() {\n        var __90991_metz_context = arguments[arguments.length - 1];\n        [] = yield { command: \"load\", startingAddress: this.__starting_address, offset: \"register\", params: Array.from(arguments).slice(0, arguments.length-1), context: __90991_metz_context };\n        (yield * this.eventBus.registerForTopic(\"USER_LOGS_IN\" /* Topic.USER_LOGS_IN */, std.flow(''Log log in'', this).log, { isDependency: false, flowId: __90991_metz_context.flowId }));\n        (yield * this.eventBus.registerForTopic(\"USER_UNINSTALLS\" /* Topic.USER_UNINSTALLS */, std.flow(''Log uninstall'', this).log, { isDependency: false, flowId: __90991_metz_context.flowId }));\n        return yield { command: \"unload\", startingAddress: this.__starting_address, offset: \"register\", returnValue: undefined };\n    }\n    async *log(data) {\n        var __90991_metz_context = arguments[arguments.length - 1];\n        [data] = yield { command: \"load\", startingAddress: this.__starting_address, offset: \"log\", params: Array.from(arguments).slice(0, arguments.length-1), context: __90991_metz_context };\n        yield { command: \"log\", startingAddress: this.__starting_address, offset: \"log\", logs: [''Received event'', data] };\n        return yield { command: \"unload\", startingAddress: this.__starting_address, offset: \"log\", returnValue: undefined };\n    }\n    constructor() {\n        this.eventBus = std.resolve(EventBus);\n        __runtime.registerInstance(this);\n    }\n}\n\n({\n                    classyKeywords: [{\n                        className: ''EventBus'',\n                        properties: [{\"name\":\"listeners\",\"show\":true},{\"name\":\"channels\",\"show\":false}],\n                        comment: ``,\n                        flags: {\"isMarked\":true,\"isHidden\":false,\"isConstructorBased\":false},\n                        filePath: ''app/event-bus.ts'',\n                        methods: [{\"methodName\":\"addTopic\",\"comment\":\"\",\"signature\":\"(topic: Topic) => void\",\"parameters\":[{\"name\":\"topic\",\"type\":\"Topic\",\"text\":\"topic: Topic\"}],\"returnType\":\"void\",\"flags\":{\"isMarked\":false,\"isHidden\":false,\"delegateToParent\":false}},{\"methodName\":\"registerForTopic\",\"comment\":\"\",\"signature\":\"<T extends Topic>(topic: T, listener: (data: TopicData<T>) => FlowExecutor<any, any>) => void\",\"parameters\":[{\"name\":\"topic\",\"type\":\"T\",\"text\":\"topic: T\"},{\"name\":\"listener\",\"type\":\"(data: TopicData<T>) => FlowExecutor<any, any>\",\"text\":\"listener: (data: TopicData<T>) => std.FlowExecutor<any, any>\"}],\"returnType\":\"void\",\"flags\":{\"isMarked\":true,\"isHidden\":false,\"delegateToParent\":false}},{\"methodName\":\"emit\",\"comment\":\"\",\"signature\":\"<T extends Topic>(topic: T, data: TopicData<T>) => void\",\"parameters\":[{\"name\":\"topic\",\"type\":\"T\",\"text\":\"topic: T\"},{\"name\":\"data\",\"type\":\"TopicData<T>\",\"text\":\"data: TopicData<T>\"}],\"returnType\":\"void\",\"flags\":{\"isMarked\":true,\"isHidden\":false,\"delegateToParent\":false}}],\n                        class: EventBus,\n                    },{\n                        className: ''LoginComponent'',\n                        properties: [{\"name\":\"eventBus\",\"show\":false}],\n                        comment: ``,\n                        flags: {\"isMarked\":true,\"isHidden\":false,\"isConstructorBased\":false},\n                        filePath: ''app/producers.ts'',\n                        methods: [{\"methodName\":\"login\",\"comment\":\"\",\"signature\":\"() => void\",\"parameters\":[],\"returnType\":\"void\",\"flags\":{\"isMarked\":true,\"isHidden\":false,\"delegateToParent\":false}}],\n                        class: LoginComponent,\n                    },{\n                        className: ''UninstallMonitorComponent'',\n                        properties: [{\"name\":\"eventBus\",\"show\":false}],\n                        comment: ``,\n                        flags: {\"isMarked\":true,\"isHidden\":false,\"isConstructorBased\":false},\n                        filePath: ''app/producers.ts'',\n                        methods: [{\"methodName\":\"uninstall\",\"comment\":\"\",\"signature\":\"() => void\",\"parameters\":[],\"returnType\":\"void\",\"flags\":{\"isMarked\":true,\"isHidden\":false,\"delegateToParent\":false}}],\n                        class: UninstallMonitorComponent,\n                    },{\n                        className: ''EventLogger'',\n                        properties: [{\"name\":\"eventBus\",\"show\":false}],\n                        comment: ``,\n                        flags: {\"isMarked\":true,\"isHidden\":false,\"isConstructorBased\":false},\n                        filePath: ''app/consumers.ts'',\n                        methods: [{\"methodName\":\"register\",\"comment\":\"\",\"signature\":\"() => void\",\"parameters\":[],\"returnType\":\"void\",\"flags\":{\"isMarked\":true,\"isHidden\":false,\"delegateToParent\":false}},{\"methodName\":\"log\",\"comment\":\"\",\"signature\":\"(data: any) => void\",\"parameters\":[{\"name\":\"data\",\"type\":\"any\",\"text\":\"data: any\"}],\"returnType\":\"void\",\"flags\":{\"isMarked\":true,\"isHidden\":false,\"delegateToParent\":false}}],\n                        class: EventLogger,\n                    }]\n                })", "keywords": [{"flags": {"isHidden": false, "isMarked": true, "isConstructorBased": false}, "comment": "", "methods": [{"flags": {"isHidden": false, "isMarked": false, "delegateToParent": false}, "comment": "", "signature": "(topic: Topic) => void", "methodName": "addTopic", "parameters": [{"name": "topic", "text": "topic: Topic", "type": "Topic"}], "returnType": "void"}, {"flags": {"isHidden": false, "isMarked": true, "delegateToParent": false}, "comment": "", "signature": "<T extends Topic>(topic: T, listener: (data: TopicData<T>) => FlowExecutor<any, any>) => void", "methodName": "registerForTopic", "parameters": [{"name": "topic", "text": "topic: T", "type": "T"}, {"name": "listener", "text": "listener: (data: TopicData<T>) => std.FlowExecutor<any, any>", "type": "(data: TopicData<T>) => FlowExecutor<any, any>"}], "returnType": "void"}, {"flags": {"isHidden": false, "isMarked": true, "delegateToParent": false}, "comment": "", "signature": "<T extends Topic>(topic: T, data: TopicData<T>) => void", "methodName": "emit", "parameters": [{"name": "topic", "text": "topic: T", "type": "T"}, {"name": "data", "text": "data: TopicData<T>", "type": "TopicData<T>"}], "returnType": "void"}], "filePath": "app/event-bus.ts", "className": "EventBus", "properties": [{"name": "listeners", "show": true}, {"name": "channels", "show": false}], "channelEmitters": [{"slug": "topic", "type": "undefined"}], "typeParametersLength": 0}, {"flags": {"isHidden": false, "isMarked": true, "isConstructorBased": false}, "comment": "", "methods": [{"flags": {"isHidden": false, "isMarked": true, "delegateToParent": false}, "comment": "", "signature": "() => void", "methodName": "login", "parameters": [], "returnType": "void"}], "filePath": "app/producers.ts", "className": "LoginComponent", "properties": [{"name": "eventBus", "show": false}], "channelEmitters": [], "typeParametersLength": 0}, {"flags": {"isHidden": false, "isMarked": true, "isConstructorBased": false}, "comment": "", "methods": [{"flags": {"isHidden": false, "isMarked": true, "delegateToParent": false}, "comment": "", "signature": "() => void", "methodName": "uninstall", "parameters": [], "returnType": "void"}], "filePath": "app/producers.ts", "className": "UninstallMonitorComponent", "properties": [{"name": "eventBus", "show": false}], "channelEmitters": [], "typeParametersLength": 0}, {"flags": {"isHidden": false, "isMarked": true, "isConstructorBased": false}, "comment": "", "methods": [{"flags": {"isHidden": false, "isMarked": true, "delegateToParent": false}, "comment": "", "signature": "() => void", "methodName": "register", "parameters": [], "returnType": "void"}, {"flags": {"isHidden": false, "isMarked": true, "delegateToParent": false}, "comment": "", "signature": "(data: any) => void", "methodName": "log", "parameters": [{"name": "data", "text": "data: any", "type": "any"}], "returnType": "void"}], "filePath": "app/consumers.ts", "className": "EventLogger", "properties": [{"name": "eventBus", "show": false}], "channelEmitters": [], "typeParametersLength": 0}], "projectVersion": 1, "callHierarchyContainer": [{"source": {"id": "LoginComponentlogin", "isHidden": false, "className": "LoginComponent", "methodName": "login"}, "destination": {"id": "EventBusemit", "isHidden": false, "className": "EventBus", "methodName": "emit"}}, {"source": {"id": "UninstallMonitorComponentuninstall", "isHidden": false, "className": "UninstallMonitorComponent", "methodName": "uninstall"}, "destination": {"id": "EventBusemit", "isHidden": false, "className": "EventBus", "methodName": "emit"}}, {"source": {"id": "EventLoggerregister", "isHidden": false, "className": "EventLogger", "methodName": "register"}, "destination": {"id": "EventBusregisterForTopic", "isHidden": false, "className": "EventBus", "methodName": "registerForTopic"}}]}, "isDifferentThanBefore": true}, "display": {"resolutionNodeMap": {"LOW": {"ba3b5a3a5add3763eef0b4108ca6ad16_1": {"style": {"width": "500px", "height": "221px", "borderColor": "rgba(131, 90, 252, 0.65)", "backgroundColor": "rgba(121, 80, 242, 0.1)"}, "position": {"x": 12, "y": 433}}, "d6955e4b23d64ed05e4d8f16f34903e7_1": {"style": {"width": "500px", "height": "221px", "borderColor": "rgba(131, 90, 252, 0.65)", "backgroundColor": "rgba(121, 80, 242, 0.1)"}, "position": {"x": 12, "y": 854}}, "f94e6a4d1d0af2dbc045fa051fbb5826_1": {"style": {"width": "500px", "height": "221px", "borderColor": "rgba(45, 55, 75, 0.65)", "backgroundColor": "rgba(35, 45, 65, 0.1)"}, "position": {"x": 12, "y": 12}}, "ff362bb858a0e6a364c96cb466eab3b3_1": {"style": {"width": "500px", "height": "221px", "borderColor": "rgba(44, 149, 240, 0.65)", "backgroundColor": "rgba(34, 139, 230, 0.1)"}, "position": {"x": 712, "y": 433}}, "f94e6a4d1d0af2dbc045fa051fbb5826_1log": {"style": {"width": "300px", "height": "337.3333333333333px"}, "position": {"x": 100, "y": 120}}, "ff362bb858a0e6a364c96cb466eab3b3_1emit": {"style": {"width": "300px", "height": "371.77777777777777px"}, "position": {"x": 100, "y": 1016}}, "d6955e4b23d64ed05e4d8f16f34903e7_1login": {"style": {"width": "300px", "height": "316.22222222222223px"}, "position": {"x": 100, "y": 120}}, "f94e6a4d1d0af2dbc045fa051fbb5826_1register": {"style": {"width": "300px", "height": "329.55555555555554px"}, "position": {"x": 100, "y": 558}}, "ba3b5a3a5add3763eef0b4108ca6ad16_1uninstall": {"style": {"width": "300px", "height": "334px"}, "position": {"x": 100, "y": 120}}, "ff362bb858a0e6a364c96cb466eab3b3_1registerForTopic": {"style": {"width": "300px", "height": "425.1111111111111px"}, "position": {"x": 100, "y": 490}}}, "HIGH": {"ba3b5a3a5add3763eef0b4108ca6ad16_1": {"style": {"width": "500px", "height": "554px", "borderColor": "rgba(131, 90, 252, 0.65)", "backgroundColor": "rgba(121, 80, 242, 0.1)"}, "position": {"x": 12, "y": 1200}}, "d6955e4b23d64ed05e4d8f16f34903e7_1": {"style": {"width": "500px", "height": "536.2222222222222px", "borderColor": "rgba(131, 90, 252, 0.65)", "backgroundColor": "rgba(121, 80, 242, 0.1)"}, "position": {"x": 12, "y": 1954}}, "f94e6a4d1d0af2dbc045fa051fbb5826_1": {"style": {"width": "500px", "height": "987.5555555555555px", "borderColor": "rgba(45, 55, 75, 0.65)", "backgroundColor": "rgba(35, 45, 65, 0.1)"}, "position": {"x": 12, "y": 12}}, "ff362bb858a0e6a364c96cb466eab3b3_1": {"style": {"width": "500px", "height": "1487.7777777777778px", "borderColor": "rgba(44, 149, 240, 0.65)", "backgroundColor": "rgba(34, 139, 230, 0.1)"}, "position": {"x": 962, "y": 285}}, "f94e6a4d1d0af2dbc045fa051fbb5826_1log": {"style": {"width": "300px", "height": "337.3333333333333px"}, "position": {"x": 100, "y": 120}}, "ff362bb858a0e6a364c96cb466eab3b3_1emit": {"style": {"width": "300px", "height": "371.77777777777777px"}, "position": {"x": 100, "y": 1016}}, "d6955e4b23d64ed05e4d8f16f34903e7_1login": {"style": {"width": "300px", "height": "316.22222222222223px"}, "position": {"x": 100, "y": 120}}, "f94e6a4d1d0af2dbc045fa051fbb5826_1register": {"style": {"width": "300px", "height": "329.55555555555554px"}, "position": {"x": 100, "y": 558}}, "ba3b5a3a5add3763eef0b4108ca6ad16_1uninstall": {"style": {"width": "300px", "height": "334px"}, "position": {"x": 100, "y": 120}}, "ff362bb858a0e6a364c96cb466eab3b3_1registerForTopic": {"style": {"width": "300px", "height": "425.1111111111111px"}, "position": {"x": 100, "y": 490}}}, "MEDIUM": {"ba3b5a3a5add3763eef0b4108ca6ad16_1": {"style": {"width": "500px", "height": "221px", "borderColor": "rgba(131, 90, 252, 0.65)", "backgroundColor": "rgba(121, 80, 242, 0.1)"}, "position": {"x": 12, "y": 433}}, "d6955e4b23d64ed05e4d8f16f34903e7_1": {"style": {"width": "500px", "height": "221px", "borderColor": "rgba(131, 90, 252, 0.65)", "backgroundColor": "rgba(121, 80, 242, 0.1)"}, "position": {"x": 12, "y": 854}}, "f94e6a4d1d0af2dbc045fa051fbb5826_1": {"style": {"width": "500px", "height": "221px", "borderColor": "rgba(45, 55, 75, 0.65)", "backgroundColor": "rgba(35, 45, 65, 0.1)"}, "position": {"x": 12, "y": 12}}, "ff362bb858a0e6a364c96cb466eab3b3_1": {"style": {"width": "500px", "height": "591px", "borderColor": "rgba(44, 149, 240, 0.65)", "backgroundColor": "rgba(34, 139, 230, 0.1)"}, "position": {"x": 712, "y": 248}}, "f94e6a4d1d0af2dbc045fa051fbb5826_1log": {"style": {"width": "300px", "height": "337.3333333333333px"}, "position": {"x": 100, "y": 120}}, "ff362bb858a0e6a364c96cb466eab3b3_1emit": {"style": {"width": "300px", "height": "371.77777777777777px"}, "position": {"x": 100, "y": 1016}}, "d6955e4b23d64ed05e4d8f16f34903e7_1login": {"style": {"width": "300px", "height": "316.22222222222223px"}, "position": {"x": 100, "y": 120}}, "f94e6a4d1d0af2dbc045fa051fbb5826_1register": {"style": {"width": "300px", "height": "329.55555555555554px"}, "position": {"x": 100, "y": 558}}, "ba3b5a3a5add3763eef0b4108ca6ad16_1uninstall": {"style": {"width": "300px", "height": "334px"}, "position": {"x": 100, "y": 120}}, "ff362bb858a0e6a364c96cb466eab3b3_1registerForTopic": {"style": {"width": "300px", "height": "425.1111111111111px"}, "position": {"x": 100, "y": 490}}}}}, "project": [{"path": "app/event-bus.ts", "type": "file", "value": "const enum Topic {\n    USER_LOGS_IN = ''USER_LOGS_IN'',\n    USER_UNINSTALLS = ''USER_UNINSTALLS'',\n}\n\ntype TopicData<T extends Topic> = T extends Topic.USER_LOGS_IN ? {\n    login_at: number\n} : T extends Topic.USER_UNINSTALLS ? {\n    uninstalled_at: number\n} : never;\n\n@Injectable\nclass EventBus {\n    @Show\n    private listeners: {topic: Topic, count: number}[] = [];\n    \n    private channels = new Map<Topic, std.ChannelEmitter<any>>();\n\n    constructor() {\n        this.addTopic(Topic.USER_LOGS_IN);\n        this.addTopic(Topic.USER_UNINSTALLS);\n    }\n\n    private addTopic(topic: Topic) {\n        const emitter = std.createChannelEmitter(topic);\n        this.channels.set(topic, emitter);\n        // this.topics.push(topic);\n    }\n\n    registerForTopic<T extends Topic>(topic: T, listener: (data: TopicData<T>) => std.FlowExecutor<any, any>) {\n        // There''s an issue of compiler eagerly parsing all the slugs and their types.\n        // For now, we have to use the ''any'' escape hatch.\n        std.registerChannelListener(topic as any, listener as any);\n        const topicRecord = this.listeners.find(r => r.topic === topic);\n        if(topicRecord) {\n            topicRecord.count++;\n        } else {\n            this.listeners.push({topic, count: 1});\n        }\n    }\n\n    emit<T extends Topic>(topic: T, data: TopicData<T>) {\n        const emitter = this.channels.get(topic);\n        if(!emitter) {\n            std.log(`Topic ${topic} not found!`);\n            return;\n        }\n\n        emitter.emit(data);\n    }\n}"}, {"path": "app/producers.ts", "type": "file", "value": "@Injectable\nclass LoginComponent {\n    eventBus = std.resolve(EventBus);\n\n    login() {\n        this.eventBus.emit(Topic.USER_LOGS_IN, { login_at: std.currentTick() });\n    }\n}\n\n@Injectable\nclass UninstallMonitorComponent {\n    eventBus = std.resolve(EventBus);\n\n    uninstall() {\n        this.eventBus.emit(Topic.USER_UNINSTALLS, { uninstalled_at: std.currentTick() });\n    }\n}"}, {"path": "app/consumers.ts", "type": "file", "value": "@Injectable\nclass EventLogger {\n    eventBus = std.resolve(EventBus);\n\n    register() {\n        this.eventBus.registerForTopic(Topic.USER_LOGS_IN, std.flow(''Log log in'', this).log);\n        this.eventBus.registerForTopic(Topic.USER_UNINSTALLS, std.flow(''Log uninstall'', this).log);\n    }\n    \n    log(data: any) {\n        std.log(''Received event'', data);\n    }\n}"}], "storySetups": [{"id": "0", "title": "Two listeners", "script": {"raw": "std.flow(''Register for topics'', std.resolve(EventLogger)).register().run();\nstd.flow(''User logs in'', std.resolve(LoginComponent), { after: 5 }).login();\nstd.flow(''User un-installs'', std.resolve(UninstallMonitorComponent), { after: 8 }).uninstall();\n", "compiled": "std.flow(''Register for topics'', std.resolve(EventLogger)).register().run();\nstd.flow(''User logs in'', std.resolve(LoginComponent), { after: 5 }).login();\nstd.flow(''User un-installs'', std.resolve(UninstallMonitorComponent), { after: 8 }).uninstall();\n"}, "edgeMap": {}, "resolutionNodeMap": {"LOW": {"13423abbe62b053d18fb5bcada2d72d7_1": {"iconData": {"iconString": "tdesign:money", "iconColorVariant": "dark"}, "backgroundColor": "#868e96"}, "33cbc8583cdbf983cb7a573dc36f6230_1": {"iconData": {"iconString": "tdesign:money", "iconColorVariant": "dark"}, "backgroundColor": "#fd7e14"}, "acebd7731f7751384415d9276e500c51_1": {"iconData": {"iconString": "logos:mysql", "iconColorVariant": "dark"}, "backgroundColor": "#4c6ef5"}, "ba3b5a3a5add3763eef0b4108ca6ad16_1": {"position": {"x": 33.20562659846547, "y": 213.8751918158568}, "backgroundColor": "#7950f2"}, "d6955e4b23d64ed05e4d8f16f34903e7_1": {"position": {"x": 43.80843989769824, "y": 633.1080562659845}, "backgroundColor": "#7950f2"}, "d8d039868a0ed5cb53df60e7069a2da6_1": {"iconData": {"iconString": "solar:graph-down-bold", "iconColorVariant": "dark"}}, "f94e6a4d1d0af2dbc045fa051fbb5826_1": {"position": {"x": 1362.091560102302, "y": 432.57826086956527}, "backgroundColor": "#232D41"}, "ff362bb858a0e6a364c96cb466eab3b3_1": {"iconData": {"iconString": "noto-v1:bus", "iconColorVariant": "dark"}, "backgroundColor": "#228be6"}, "f94e6a4d1d0af2dbc045fa051fbb5826_1log": {"iconData": {"iconString": "game-icons:archive-register", "iconColorVariant": "dark"}}, "ff362bb858a0e6a364c96cb466eab3b3_1emit": {"iconData": {"iconString": "material-symbols:outbox", "iconColorVariant": "dark"}}, "d6955e4b23d64ed05e4d8f16f34903e7_1login": {"iconData": {"iconString": "line-md:login", "iconColorVariant": "dark"}}, "acebd7731f7751384415d9276e500c51_1shard1": {"iconData": {"iconString": "ph:table", "iconColorVariant": "dark"}}, "acebd7731f7751384415d9276e500c51_1shard2": {"iconData": {"iconString": "ph:table", "iconColorVariant": "dark"}}, "d8d039868a0ed5cb53df60e7069a2da6_1payout": {"iconData": {"iconString": "material-symbols:outbox", "iconColorVariant": "dark"}}, "f94e6a4d1d0af2dbc045fa051fbb5826_1register": {"iconData": {"iconString": "ph:plus-fill", "iconColorVariant": "dark"}}, "ba3b5a3a5add3763eef0b4108ca6ad16_1uninstall": {"iconData": {"iconString": "fluent:uninstall-app-20-filled", "iconColorVariant": "dark"}}, "13423abbe62b053d18fb5bcada2d72d7_1processPayments": {"iconData": {"iconString": "devicon:nodejs", "iconColorVariant": "dark"}}, "33cbc8583cdbf983cb7a573dc36f6230_1processPayments": {"iconData": {"iconString": "skill-icons:rust", "iconColorVariant": "dark"}}, "ff362bb858a0e6a364c96cb466eab3b3_1registerForTopic": {"iconData": {"iconString": "ph:plus-fill", "iconColorVariant": "dark"}}}, "HIGH": {"13423abbe62b053d18fb5bcada2d72d7_1": {"iconData": {"iconString": "tdesign:money", "iconColorVariant": "dark"}, "position": {"x": 962, "y": -49.116918158567955}, "backgroundColor": "#868e96"}, "33cbc8583cdbf983cb7a573dc36f6230_1": {"iconData": {"iconString": "tdesign:money", "iconColorVariant": "dark"}, "position": {"x": 959.6889897698212, "y": 737.657212276215}, "backgroundColor": "#fd7e14"}, "acebd7731f7751384415d9276e500c51_1": {"iconData": {"iconString": "logos:mysql", "iconColorVariant": "dark"}, "position": {"x": 1725.336470807851, "y": 164.17993534137668}, "backgroundColor": "#4c6ef5"}, "ba3b5a3a5add3763eef0b4108ca6ad16_1": {"position": {"x": 1219.55989769821, "y": 419.2715601023018}, "backgroundColor": "#7950f2"}, "d6955e4b23d64ed05e4d8f16f34903e7_1": {"position": {"x": 1218.5321386035544, "y": 1163.0080919568163}, "backgroundColor": "#7950f2"}, "d8d039868a0ed5cb53df60e7069a2da6_1": {"iconData": {"iconString": "solar:graph-down-bold", "iconColorVariant": "dark"}, "position": {"x": 186.14762905871237, "y": 326.6813170104524}}, "e5c7ac29ed8712ae5aba067eb6b5e0a3_1": {"position": {"x": 466.7541943734016, "y": 552.0758823529412}}, "f94e6a4d1d0af2dbc045fa051fbb5826_1": {"position": {"x": 2649.4719576667476, "y": 474.96214432957663}, "backgroundColor": "#232D41"}, "ff362bb858a0e6a364c96cb466eab3b3_1": {"iconData": {"iconString": "noto-v1:bus", "iconColorVariant": "dark"}, "position": {"x": 2005.9594884910484, "y": 239.08511508951403}, "backgroundColor": "#228be6"}, "f94e6a4d1d0af2dbc045fa051fbb5826_1log": {"iconData": {"iconString": "game-icons:archive-register", "iconColorVariant": "dark"}}, "ff362bb858a0e6a364c96cb466eab3b3_1emit": {"iconData": {"iconString": "material-symbols:outbox", "iconColorVariant": "dark"}}, "d6955e4b23d64ed05e4d8f16f34903e7_1login": {"iconData": {"iconString": "line-md:login", "iconColorVariant": "dark"}}, "acebd7731f7751384415d9276e500c51_1shard1": {"iconData": {"iconString": "ph:table", "iconColorVariant": "dark"}}, "acebd7731f7751384415d9276e500c51_1shard2": {"iconData": {"iconString": "ph:table", "iconColorVariant": "dark"}}, "d8d039868a0ed5cb53df60e7069a2da6_1payout": {"iconData": {"iconString": "material-symbols:outbox", "iconColorVariant": "dark"}}, "f94e6a4d1d0af2dbc045fa051fbb5826_1register": {"iconData": {"iconString": "ph:plus-fill", "iconColorVariant": "dark"}}, "ba3b5a3a5add3763eef0b4108ca6ad16_1uninstall": {"iconData": {"iconString": "fluent:uninstall-app-20-filled", "iconColorVariant": "dark"}}, "13423abbe62b053d18fb5bcada2d72d7_1processPayments": {"iconData": {"iconString": "devicon:nodejs", "iconColorVariant": "dark"}}, "33cbc8583cdbf983cb7a573dc36f6230_1processPayments": {"iconData": {"iconString": "skill-icons:rust", "iconColorVariant": "dark"}}, "ff362bb858a0e6a364c96cb466eab3b3_1registerForTopic": {"iconData": {"iconString": "ph:plus-fill", "iconColorVariant": "dark"}}}, "MEDIUM": {"13423abbe62b053d18fb5bcada2d72d7_1": {"iconData": {"iconString": "tdesign:money", "iconColorVariant": "dark"}, "backgroundColor": "#868e96"}, "33cbc8583cdbf983cb7a573dc36f6230_1": {"iconData": {"iconString": "tdesign:money", "iconColorVariant": "dark"}, "backgroundColor": "#fd7e14"}, "acebd7731f7751384415d9276e500c51_1": {"iconData": {"iconString": "logos:mysql", "iconColorVariant": "dark"}, "backgroundColor": "#4c6ef5"}, "ba3b5a3a5add3763eef0b4108ca6ad16_1": {"position": {"x": 26.13708439897704, "y": 256.2864450127876}, "backgroundColor": "#7950f2"}, "d6955e4b23d64ed05e4d8f16f34903e7_1": {"position": {"x": 40.27416879795396, "y": 631.3409207161125}, "backgroundColor": "#7950f2"}, "d8d039868a0ed5cb53df60e7069a2da6_1": {"iconData": {"iconString": "solar:graph-down-bold", "iconColorVariant": "dark"}}, "f94e6a4d1d0af2dbc045fa051fbb5826_1": {"position": {"x": 1330.2831202046038, "y": 432.5782608695652}, "backgroundColor": "#232D41"}, "ff362bb858a0e6a364c96cb466eab3b3_1": {"iconData": {"iconString": "noto-v1:bus", "iconColorVariant": "dark"}, "backgroundColor": "#228be6"}, "f94e6a4d1d0af2dbc045fa051fbb5826_1log": {"iconData": {"iconString": "game-icons:archive-register", "iconColorVariant": "dark"}}, "ff362bb858a0e6a364c96cb466eab3b3_1emit": {"iconData": {"iconString": "material-symbols:outbox", "iconColorVariant": "dark"}}, "d6955e4b23d64ed05e4d8f16f34903e7_1login": {"iconData": {"iconString": "line-md:login", "iconColorVariant": "dark"}}, "acebd7731f7751384415d9276e500c51_1shard1": {"iconData": {"iconString": "ph:table", "iconColorVariant": "dark"}}, "acebd7731f7751384415d9276e500c51_1shard2": {"iconData": {"iconString": "ph:table", "iconColorVariant": "dark"}}, "d8d039868a0ed5cb53df60e7069a2da6_1payout": {"iconData": {"iconString": "material-symbols:outbox", "iconColorVariant": "dark"}}, "f94e6a4d1d0af2dbc045fa051fbb5826_1register": {"iconData": {"iconString": "ph:plus-fill", "iconColorVariant": "dark"}}, "ba3b5a3a5add3763eef0b4108ca6ad16_1uninstall": {"iconData": {"iconString": "fluent:uninstall-app-20-filled", "iconColorVariant": "dark"}}, "13423abbe62b053d18fb5bcada2d72d7_1processPayments": {"iconData": {"iconString": "devicon:nodejs", "iconColorVariant": "dark"}}, "33cbc8583cdbf983cb7a573dc36f6230_1processPayments": {"iconData": {"iconString": "skill-icons:rust", "iconColorVariant": "dark"}}, "ff362bb858a0e6a364c96cb466eab3b3_1registerForTopic": {"iconData": {"iconString": "ph:plus-fill", "iconColorVariant": "dark"}}}}}]}');
INSERT INTO public.project_templates (id, name, description, created_at, updated_at, project_art, project_artifacts) VALUES (7, 'Average stock price', 'A simpler example for events', '2024-08-20 21:02:35.570704', '2024-08-20 21:02:35.570704', '{"iconString": "emojione-v1:stock-chart", "iconColorVariant": "dark"}', '{"build": {"state": "built", "artificats": {"bundle": "class StockPriceEmitter {\n    async *emit() {\n        var __90991_metz_context = arguments[arguments.length - 1];\n        [] = yield { command: \"load\", startingAddress: this.__starting_address, offset: \"emit\", params: Array.from(arguments).slice(0, arguments.length-1), context: __90991_metz_context };\n        const randomPrice = Math.random() * 300;\n        this.emitter.emit(randomPrice);\n        return yield { command: \"unload\", startingAddress: this.__starting_address, offset: \"emit\", returnValue: undefined };\n    }\n    constructor() {\n        this.emitter = std.createChannelEmitter(''apple'');\n        __runtime.registerInstance(this);\n    }\n}\nclass AppleAverageStockPrice {\n    addToStoredPrices(price) {\n        if (this.storedPrices.length >= this.MAX_STORAGE) {\n            this.storedPrices.splice(0, 1);\n        }\n        this.storedPrices.push(price);\n    }\n    async *updateAverage(price) {\n        var __90991_metz_context = arguments[arguments.length - 1];\n        [price] = yield { command: \"load\", startingAddress: this.__starting_address, offset: \"updateAverage\", params: Array.from(arguments).slice(0, arguments.length-1), context: __90991_metz_context };\n        this.addToStoredPrices(price);\n        const averagePrice = this.storedPrices.reduce((acc, cur) => acc + cur, 0) / this.storedPrices.length;\n        this.averagePrice = Math.round(averagePrice);\n        return yield { command: \"unload\", startingAddress: this.__starting_address, offset: \"updateAverage\", returnValue: undefined };\n    }\n    constructor() {\n        this.MAX_STORAGE = 10;\n        this.storedPrices = [];\n        this.averagePrice = 0;\n        __runtime.registerInstance(this);\n        std.registerChannelListener(''apple'', std.flow(\"Calculate Average Apple Stock price\", this).updateAverage);\n    }\n}\n\n({\n                    classyKeywords: [{\n                        className: ''StockPriceEmitter'',\n                        properties: [{\"name\":\"emitter\",\"show\":false}],\n                        comment: ``,\n                        flags: {\"isMarked\":true,\"isHidden\":false,\"isConstructorBased\":false},\n                        filePath: ''app/main.ts'',\n                        methods: [{\"methodName\":\"emit\",\"comment\":\"\",\"signature\":\"() => void\",\"parameters\":[],\"returnType\":\"void\",\"flags\":{\"isMarked\":true,\"isHidden\":false,\"delegateToParent\":false}}],\n                        class: StockPriceEmitter,\n                    },{\n                        className: ''AppleAverageStockPrice'',\n                        properties: [{\"name\":\"MAX_STORAGE\",\"show\":false},{\"name\":\"storedPrices\",\"show\":false},{\"name\":\"averagePrice\",\"show\":true}],\n                        comment: ``,\n                        flags: {\"isMarked\":true,\"isHidden\":false,\"isConstructorBased\":false},\n                        filePath: ''app/main.ts'',\n                        methods: [{\"methodName\":\"addToStoredPrices\",\"comment\":\"\",\"signature\":\"(price: number) => void\",\"parameters\":[{\"name\":\"price\",\"type\":\"number\",\"text\":\"price: number\"}],\"returnType\":\"void\",\"flags\":{\"isMarked\":false,\"isHidden\":false,\"delegateToParent\":false}},{\"methodName\":\"updateAverage\",\"comment\":\"\",\"signature\":\"(price: number) => void\",\"parameters\":[{\"name\":\"price\",\"type\":\"number\",\"text\":\"price: number\"}],\"returnType\":\"void\",\"flags\":{\"isMarked\":true,\"isHidden\":false,\"delegateToParent\":false}}],\n                        class: AppleAverageStockPrice,\n                    }]\n                })", "keywords": [{"flags": {"isHidden": false, "isMarked": true, "isConstructorBased": false}, "comment": "", "methods": [{"flags": {"isHidden": false, "isMarked": true, "delegateToParent": false}, "comment": "", "signature": "() => void", "methodName": "emit", "parameters": [], "returnType": "void"}], "filePath": "app/main.ts", "className": "StockPriceEmitter", "properties": [{"name": "emitter", "show": false}], "channelEmitters": [{"slug": "apple", "type": "number"}], "typeParametersLength": 0}, {"flags": {"isHidden": false, "isMarked": true, "isConstructorBased": false}, "comment": "", "methods": [{"flags": {"isHidden": false, "isMarked": false, "delegateToParent": false}, "comment": "", "signature": "(price: number) => void", "methodName": "addToStoredPrices", "parameters": [{"name": "price", "text": "price: number", "type": "number"}], "returnType": "void"}, {"flags": {"isHidden": false, "isMarked": true, "delegateToParent": false}, "comment": "", "signature": "(price: number) => void", "methodName": "updateAverage", "parameters": [{"name": "price", "text": "price: number", "type": "number"}], "returnType": "void"}], "filePath": "app/main.ts", "className": "AppleAverageStockPrice", "properties": [{"name": "MAX_STORAGE", "show": false}, {"name": "storedPrices", "show": false}, {"name": "averagePrice", "show": true}], "channelEmitters": [], "typeParametersLength": 0}], "projectVersion": 8, "callHierarchyContainer": []}, "isDifferentThanBefore": false}, "display": {"resolutionNodeMap": {"LOW": {"ba3b5a3a5add3763eef0b4108ca6ad16_1": {"style": {"width": "500px", "height": "221px", "borderColor": "rgba(131, 90, 252, 0.65)", "backgroundColor": "rgba(121, 80, 242, 0.1)"}, "position": {"x": 12, "y": 433}}, "d6955e4b23d64ed05e4d8f16f34903e7_1": {"style": {"width": "500px", "height": "221px", "borderColor": "rgba(131, 90, 252, 0.65)", "backgroundColor": "rgba(121, 80, 242, 0.1)"}, "position": {"x": 12, "y": 854}}, "f94e6a4d1d0af2dbc045fa051fbb5826_1": {"style": {"width": "500px", "height": "221px", "borderColor": "rgba(45, 55, 75, 0.65)", "backgroundColor": "rgba(35, 45, 65, 0.1)"}, "position": {"x": 12, "y": 12}}, "ff362bb858a0e6a364c96cb466eab3b3_1": {"style": {"width": "500px", "height": "221px", "borderColor": "rgba(44, 149, 240, 0.65)", "backgroundColor": "rgba(34, 139, 230, 0.1)"}, "position": {"x": 712, "y": 433}}, "f94e6a4d1d0af2dbc045fa051fbb5826_1log": {"style": {"width": "300px", "height": "337.3333333333333px"}, "position": {"x": 100, "y": 120}}, "ff362bb858a0e6a364c96cb466eab3b3_1emit": {"style": {"width": "300px", "height": "371.77777777777777px"}, "position": {"x": 100, "y": 1016}}, "d6955e4b23d64ed05e4d8f16f34903e7_1login": {"style": {"width": "300px", "height": "316.22222222222223px"}, "position": {"x": 100, "y": 120}}, "f94e6a4d1d0af2dbc045fa051fbb5826_1register": {"style": {"width": "300px", "height": "329.55555555555554px"}, "position": {"x": 100, "y": 558}}, "ba3b5a3a5add3763eef0b4108ca6ad16_1uninstall": {"style": {"width": "300px", "height": "334px"}, "position": {"x": 100, "y": 120}}, "ff362bb858a0e6a364c96cb466eab3b3_1registerForTopic": {"style": {"width": "300px", "height": "425.1111111111111px"}, "position": {"x": 100, "y": 490}}}, "HIGH": {"3bda18d1bd4af22ff539474ece6c90f1_1": {"style": {"width": "500px", "height": "971.7777777777778px"}, "position": {"x": 12, "y": 744}}, "48cbac720d2aa89cfd064d8702b201f6_1": {"style": {"width": "500px", "height": "531.7777777777778px"}, "position": {"x": 12, "y": 12}}, "48cbac720d2aa89cfd064d8702b201f6_1emit": {"style": {"width": "300px", "height": "311.77777777777777px"}, "position": {"x": 100, "y": 120}}, "3bda18d1bd4af22ff539474ece6c90f1_1updateAverage": {"style": {"width": "300px", "height": "381.77777777777777px"}, "position": {"x": 100, "y": 490}}}, "MEDIUM": {"ba3b5a3a5add3763eef0b4108ca6ad16_1": {"style": {"width": "500px", "height": "221px", "borderColor": "rgba(131, 90, 252, 0.65)", "backgroundColor": "rgba(121, 80, 242, 0.1)"}, "position": {"x": 12, "y": 433}}, "d6955e4b23d64ed05e4d8f16f34903e7_1": {"style": {"width": "500px", "height": "221px", "borderColor": "rgba(131, 90, 252, 0.65)", "backgroundColor": "rgba(121, 80, 242, 0.1)"}, "position": {"x": 12, "y": 854}}, "f94e6a4d1d0af2dbc045fa051fbb5826_1": {"style": {"width": "500px", "height": "221px", "borderColor": "rgba(45, 55, 75, 0.65)", "backgroundColor": "rgba(35, 45, 65, 0.1)"}, "position": {"x": 12, "y": 12}}, "ff362bb858a0e6a364c96cb466eab3b3_1": {"style": {"width": "500px", "height": "591px", "borderColor": "rgba(44, 149, 240, 0.65)", "backgroundColor": "rgba(34, 139, 230, 0.1)"}, "position": {"x": 712, "y": 248}}, "f94e6a4d1d0af2dbc045fa051fbb5826_1log": {"style": {"width": "300px", "height": "337.3333333333333px"}, "position": {"x": 100, "y": 120}}, "ff362bb858a0e6a364c96cb466eab3b3_1emit": {"style": {"width": "300px", "height": "371.77777777777777px"}, "position": {"x": 100, "y": 1016}}, "d6955e4b23d64ed05e4d8f16f34903e7_1login": {"style": {"width": "300px", "height": "316.22222222222223px"}, "position": {"x": 100, "y": 120}}, "f94e6a4d1d0af2dbc045fa051fbb5826_1register": {"style": {"width": "300px", "height": "329.55555555555554px"}, "position": {"x": 100, "y": 558}}, "ba3b5a3a5add3763eef0b4108ca6ad16_1uninstall": {"style": {"width": "300px", "height": "334px"}, "position": {"x": 100, "y": 120}}, "ff362bb858a0e6a364c96cb466eab3b3_1registerForTopic": {"style": {"width": "300px", "height": "425.1111111111111px"}, "position": {"x": 100, "y": 490}}}}}, "project": [{"path": "app/main.ts", "type": "file", "value": "@Injectable\nclass StockPriceEmitter {\n\tprivate emitter = std.createChannelEmitter<number>(''apple'');\n\n\temit() {\n\t\tconst randomPrice = Math.random()*300;\n\t\tthis.emitter.emit(randomPrice);\n\t}\n}\n\n@Injectable\nclass AppleAverageStockPrice {\n\tMAX_STORAGE = 10;\n\tprivate storedPrices: number[] = [];\n\n\t@Show\n\taveragePrice: number = 0;\n\t\n\tconstructor() {\n\t\tstd.registerChannelListener(\n\t\t\t''apple'', \n\t\t\tstd.flow(\"Calculate Average Apple Stock price\", this).updateAverage,\n\t\t);\n\t}\n\n\tprivate addToStoredPrices(price: number) {\n\t\tif(this.storedPrices.length >= this.MAX_STORAGE) {\n\t\t\tthis.storedPrices.splice(0, 1);\n\t\t}\n\n\t\tthis.storedPrices.push(price);\n\t}\n\n\tupdateAverage(price: number) {\n\t\tthis.addToStoredPrices(price);\n\n\t\tconst averagePrice = this.storedPrices.reduce((acc, cur) => acc+cur, 0) / this.storedPrices.length;\n\t\tthis.averagePrice = Math.round(averagePrice);\n\t}\n}"}], "storySetups": [{"id": "0", "title": "Default storage size", "script": {"raw": "std.flow(''Publish stock price'', std.resolve(StockPriceEmitter), { every: 30 }).emit();", "compiled": "std.flow(''Publish stock price'', std.resolve(StockPriceEmitter), { every: 30 }).emit();\n"}, "edgeMap": {}, "resolutionNodeMap": {"LOW": {"3bda18d1bd4af22ff539474ece6c90f1_1": {"iconData": {"iconString": "ic:baseline-apple", "iconColorVariant": "dark"}, "backgroundColor": "#7950f2"}, "439b79f9a6f62f18427ac7dbd1160322_1": {"iconData": {"iconString": "ic:baseline-apple", "iconColorVariant": "dark"}, "backgroundColor": "#7950f2"}, "48cbac720d2aa89cfd064d8702b201f6_1": {"iconData": {"iconString": "ant-design:stock-outlined", "iconColorVariant": "dark"}, "backgroundColor": "#232D41"}, "48cbac720d2aa89cfd064d8702b201f6_1emit": {"iconData": {"iconString": "material-symbols:replay-30-sharp", "iconColorVariant": "dark"}}, "48cbac720d2aa89cfd064d8702b201f6_1start": {"iconData": {"iconString": "material-symbols:replay-30-sharp", "iconColorVariant": "dark"}}, "3bda18d1bd4af22ff539474ece6c90f1_1updateAverage": {"iconData": {"iconString": "material-symbols:calculate", "iconColorVariant": "dark"}}, "439b79f9a6f62f18427ac7dbd1160322_1updateAverage": {"iconData": {"iconString": "material-symbols:calculate", "iconColorVariant": "dark"}}}, "HIGH": {"3bda18d1bd4af22ff539474ece6c90f1_1": {"iconData": {"iconString": "ic:baseline-apple", "iconColorVariant": "dark"}, "backgroundColor": "#7950f2"}, "439b79f9a6f62f18427ac7dbd1160322_1": {"iconData": {"iconString": "ic:baseline-apple", "iconColorVariant": "dark"}, "position": {"x": 370.03768542199487, "y": 618.5521611253197}, "backgroundColor": "#7950f2"}, "48cbac720d2aa89cfd064d8702b201f6_1": {"iconData": {"iconString": "ant-design:stock-outlined", "iconColorVariant": "dark"}, "position": {"x": -592.3462276214833, "y": 1023.7352685421996}, "backgroundColor": "#232D41"}, "48cbac720d2aa89cfd064d8702b201f6_1emit": {"iconData": {"iconString": "material-symbols:replay-30-sharp", "iconColorVariant": "dark"}}, "48cbac720d2aa89cfd064d8702b201f6_1start": {"iconData": {"iconString": "material-symbols:replay-30-sharp", "iconColorVariant": "dark"}}, "3bda18d1bd4af22ff539474ece6c90f1_1updateAverage": {"iconData": {"iconString": "material-symbols:calculate", "iconColorVariant": "dark"}}, "439b79f9a6f62f18427ac7dbd1160322_1updateAverage": {"iconData": {"iconString": "material-symbols:calculate", "iconColorVariant": "dark"}}}, "MEDIUM": {"3bda18d1bd4af22ff539474ece6c90f1_1": {"iconData": {"iconString": "ic:baseline-apple", "iconColorVariant": "dark"}, "backgroundColor": "#7950f2"}, "439b79f9a6f62f18427ac7dbd1160322_1": {"iconData": {"iconString": "ic:baseline-apple", "iconColorVariant": "dark"}, "backgroundColor": "#7950f2"}, "48cbac720d2aa89cfd064d8702b201f6_1": {"iconData": {"iconString": "ant-design:stock-outlined", "iconColorVariant": "dark"}, "backgroundColor": "#232D41"}, "48cbac720d2aa89cfd064d8702b201f6_1emit": {"iconData": {"iconString": "material-symbols:replay-30-sharp", "iconColorVariant": "dark"}}, "48cbac720d2aa89cfd064d8702b201f6_1start": {"iconData": {"iconString": "material-symbols:replay-30-sharp", "iconColorVariant": "dark"}}, "3bda18d1bd4af22ff539474ece6c90f1_1updateAverage": {"iconData": {"iconString": "material-symbols:calculate", "iconColorVariant": "dark"}}, "439b79f9a6f62f18427ac7dbd1160322_1updateAverage": {"iconData": {"iconString": "material-symbols:calculate", "iconColorVariant": "dark"}}}}}]}');
INSERT INTO public.project_templates (id, name, description, created_at, updated_at, project_art, project_artifacts) VALUES (5, 'A billing system mid migration', 'This introduces awaiting, racing & cancelling  flows.', '2024-08-14 09:51:36.867211', '2024-08-14 09:51:36.867211', '{"iconString": "maki:racetrack", "iconColorVariant": "dark"}', '{"build": {"state": "built", "artificats": {"bundle": "class BillingDB {\n    async *shard1() {\n        var __90991_metz_context = arguments[arguments.length - 1];\n        [] = yield { command: \"load\", startingAddress: this.__starting_address, offset: \"shard1\", params: Array.from(arguments).slice(0, arguments.length-1), context: __90991_metz_context };\n        return yield { command: \"unload\", startingAddress: this.__starting_address, offset: \"shard1\", returnValue: [\n                {\n                    id: ''1'',\n                    amount: 23\n                },\n                {\n                    id: ''2'',\n                    amount: 21\n                },\n            ] };\n    }\n    async *shard2() {\n        var __90991_metz_context = arguments[arguments.length - 1];\n        [] = yield { command: \"load\", startingAddress: this.__starting_address, offset: \"shard2\", params: Array.from(arguments).slice(0, arguments.length-1), context: __90991_metz_context };\n        return yield { command: \"unload\", startingAddress: this.__starting_address, offset: \"shard2\", returnValue: [\n                {\n                    id: ''6'',\n                    amount: 12\n                },\n            ] };\n    }\n    constructor() {\n        __runtime.registerInstance(this);\n    }\n}\nclass PayoutService {\n    /**\n     * We race the old and the new, and use the result of\n     * whoever gets here first.\n    */\n    async *payout() {\n        var __90991_metz_context = arguments[arguments.length - 1];\n        [] = yield { command: \"load\", startingAddress: this.__starting_address, offset: \"payout\", params: Array.from(arguments).slice(0, arguments.length-1), context: __90991_metz_context };\n        const legacyFlow = std.flow(''Legacy billing System'', this.legacyBillingProcessor).processPayments();\n        const newFlow = std.flow(''New billing System'', this.newBillingProcessor).processPayments();\n        const processedPayments = (yield * std.awaitRace([\n            legacyFlow,\n            newFlow\n        ], { isDependency: true, flowId: __90991_metz_context.flowId, startingAddress: this.__starting_address, offset: \"payout\" }));\n        yield { command: \"log\", startingAddress: this.__starting_address, offset: \"payout\", logs: [''Got all the payments'', processedPayments] };\n        yield { command: \"log\", startingAddress: this.__starting_address, offset: \"payout\", logs: [''Given we are racing flows & we just received our result, one of them should be cancelled now.''] };\n        return yield { command: \"unload\", startingAddress: this.__starting_address, offset: \"payout\", returnValue: processedPayments };\n    }\n    constructor() {\n        this.legacyBillingProcessor = std.resolve(LegacyBillingProcessor);\n        this.newBillingProcessor = std.resolve(NewBillingProcessor);\n        __runtime.registerInstance(this);\n    }\n}\nclass LegacyBillingProcessor {\n    /**\n     * A little slow\n    */\n    async *processPayments() {\n        var __90991_metz_context = arguments[arguments.length - 1];\n        [] = yield { command: \"load\", startingAddress: this.__starting_address, offset: \"processPayments\", params: Array.from(arguments).slice(0, arguments.length-1), context: __90991_metz_context };\n        const getDataFromShard1 = std.flow(''Get from shard1 [legacy]'', this.billingDB).shard1();\n        const getDataFromShard2 = std.flow(''Get from shard2 [legacy]'', this.billingDB).shard2();\n        /**\n         * We are waiting for data from both the flows\n        */\n        const allPayments = (yield * std.awaitAll([\n            getDataFromShard1,\n            getDataFromShard2,\n        ], { isDependency: true, flowId: __90991_metz_context.flowId, startingAddress: this.__starting_address, offset: \"processPayments\" }));\n        //This is a legacy system, so a little slow.\n        yield * ((function* () {\n            for (let index = 1; index <= 8; index++) {\n                yield { command: \"halt\", startingAddress: this.__starting_address, offset: \"processPayments\", coveredHalts: index, haltedFor: 8 };\n            }\n        }).bind(this))();\n        return yield { command: \"unload\", startingAddress: this.__starting_address, offset: \"processPayments\", returnValue: allPayments.flat() };\n    }\n    constructor() {\n        this.billingDB = std.resolve(BillingDB);\n        __runtime.registerInstance(this);\n    }\n}\nclass NewBillingProcessor {\n    /**\n     * A little faster. Re-written in rust :D\n    */\n    async *processPayments() {\n        var __90991_metz_context = arguments[arguments.length - 1];\n        [] = yield { command: \"load\", startingAddress: this.__starting_address, offset: \"processPayments\", params: Array.from(arguments).slice(0, arguments.length-1), context: __90991_metz_context };\n        const getDataFromShard1 = std.flow(''Get from shard1 [new]'', this.billingDB).shard1();\n        const getDataFromShard2 = std.flow(''Get from shard2 [new]'', this.billingDB).shard2();\n        /**\n         * We are waiting for data from both the flows\n        */\n        const allPayments = (yield * std.awaitAll([\n            getDataFromShard1,\n            getDataFromShard2,\n        ], { isDependency: true, flowId: __90991_metz_context.flowId, startingAddress: this.__starting_address, offset: \"processPayments\" }));\n        return yield { command: \"unload\", startingAddress: this.__starting_address, offset: \"processPayments\", returnValue: allPayments.flat() };\n    }\n    constructor() {\n        this.billingDB = std.resolve(BillingDB);\n        __runtime.registerInstance(this);\n    }\n}\n\n({\n                    classyKeywords: [{\n                        className: ''BillingDB'',\n                        properties: [],\n                        comment: ``,\n                        flags: {\"isMarked\":true,\"isHidden\":false,\"isConstructorBased\":false},\n                        filePath: ''app/billing-system.ts'',\n                        methods: [{\"methodName\":\"shard1\",\"comment\":\"\",\"signature\":\"() => Payment[]\",\"parameters\":[],\"returnType\":\"Payment[]\",\"flags\":{\"isMarked\":true,\"isHidden\":false,\"delegateToParent\":false}},{\"methodName\":\"shard2\",\"comment\":\"\",\"signature\":\"() => Payment[]\",\"parameters\":[],\"returnType\":\"Payment[]\",\"flags\":{\"isMarked\":true,\"isHidden\":false,\"delegateToParent\":false}}],\n                        class: BillingDB,\n                    },{\n                        className: ''PayoutService'',\n                        properties: [{\"name\":\"legacyBillingProcessor\",\"show\":false},{\"name\":\"newBillingProcessor\",\"show\":false}],\n                        comment: ``,\n                        flags: {\"isMarked\":true,\"isHidden\":false,\"isConstructorBased\":false},\n                        filePath: ''app/payout.ts'',\n                        methods: [{\"methodName\":\"payout\",\"comment\":\"We race the old and the new, and use the result of\\nwhoever gets here first.\",\"signature\":\"() => Payment[]\",\"parameters\":[],\"returnType\":\"Payment[]\",\"flags\":{\"isMarked\":true,\"isHidden\":false,\"delegateToParent\":false}}],\n                        class: PayoutService,\n                    },{\n                        className: ''LegacyBillingProcessor'',\n                        properties: [{\"name\":\"billingDB\",\"show\":false}],\n                        comment: ``,\n                        flags: {\"isMarked\":true,\"isHidden\":false,\"isConstructorBased\":false},\n                        filePath: ''app/billing processor/billing-processor.ts'',\n                        methods: [{\"methodName\":\"processPayments\",\"comment\":\"A little slow\",\"signature\":\"() => Payment[]\",\"parameters\":[],\"returnType\":\"Payment[]\",\"flags\":{\"isMarked\":true,\"isHidden\":false,\"delegateToParent\":false}}],\n                        class: LegacyBillingProcessor,\n                    },{\n                        className: ''NewBillingProcessor'',\n                        properties: [{\"name\":\"billingDB\",\"show\":false}],\n                        comment: ``,\n                        flags: {\"isMarked\":true,\"isHidden\":false,\"isConstructorBased\":false},\n                        filePath: ''app/billing processor/billing-processor.ts'',\n                        methods: [{\"methodName\":\"processPayments\",\"comment\":\"A little faster. Re-written in rust :D\",\"signature\":\"() => Payment[]\",\"parameters\":[],\"returnType\":\"Payment[]\",\"flags\":{\"isMarked\":true,\"isHidden\":false,\"delegateToParent\":false}}],\n                        class: NewBillingProcessor,\n                    }]\n                })", "keywords": [{"flags": {"isHidden": false, "isMarked": true, "isConstructorBased": false}, "comment": "", "methods": [{"flags": {"isHidden": false, "isMarked": true, "delegateToParent": false}, "comment": "", "signature": "() => Payment[]", "methodName": "shard1", "parameters": [], "returnType": "Payment[]"}, {"flags": {"isHidden": false, "isMarked": true, "delegateToParent": false}, "comment": "", "signature": "() => Payment[]", "methodName": "shard2", "parameters": [], "returnType": "Payment[]"}], "filePath": "app/billing-system.ts", "className": "BillingDB", "properties": [], "channelEmitters": [], "typeParametersLength": 0}, {"flags": {"isHidden": false, "isMarked": true, "isConstructorBased": false}, "comment": "", "methods": [{"flags": {"isHidden": false, "isMarked": true, "delegateToParent": false}, "comment": "We race the old and the new, and use the result of\nwhoever gets here first.", "signature": "() => Payment[]", "methodName": "payout", "parameters": [], "returnType": "Payment[]"}], "filePath": "app/payout.ts", "className": "PayoutService", "properties": [{"name": "legacyBillingProcessor", "show": false}, {"name": "newBillingProcessor", "show": false}], "channelEmitters": [], "typeParametersLength": 0}, {"flags": {"isHidden": false, "isMarked": true, "isConstructorBased": false}, "comment": "", "methods": [{"flags": {"isHidden": false, "isMarked": true, "delegateToParent": false}, "comment": "A little slow", "signature": "() => Payment[]", "methodName": "processPayments", "parameters": [], "returnType": "Payment[]"}], "filePath": "app/billing processor/billing-processor.ts", "className": "LegacyBillingProcessor", "properties": [{"name": "billingDB", "show": false}], "channelEmitters": [], "typeParametersLength": 0}, {"flags": {"isHidden": false, "isMarked": true, "isConstructorBased": false}, "comment": "", "methods": [{"flags": {"isHidden": false, "isMarked": true, "delegateToParent": false}, "comment": "A little faster. Re-written in rust :D", "signature": "() => Payment[]", "methodName": "processPayments", "parameters": [], "returnType": "Payment[]"}], "filePath": "app/billing processor/billing-processor.ts", "className": "NewBillingProcessor", "properties": [{"name": "billingDB", "show": false}], "channelEmitters": [], "typeParametersLength": 0}], "projectVersion": 3, "callHierarchyContainer": [{"source": {"id": "PayoutServicepayout", "isHidden": false, "className": "PayoutService", "methodName": "payout"}, "destination": {"id": "LegacyBillingProcessorprocessPayments", "isHidden": false, "className": "LegacyBillingProcessor", "methodName": "processPayments"}}, {"source": {"id": "PayoutServicepayout", "isHidden": false, "className": "PayoutService", "methodName": "payout"}, "destination": {"id": "NewBillingProcessorprocessPayments", "isHidden": false, "className": "NewBillingProcessor", "methodName": "processPayments"}}, {"source": {"id": "LegacyBillingProcessorprocessPayments", "isHidden": false, "className": "LegacyBillingProcessor", "methodName": "processPayments"}, "destination": {"id": "BillingDBshard1", "isHidden": false, "className": "BillingDB", "methodName": "shard1"}}, {"source": {"id": "LegacyBillingProcessorprocessPayments", "isHidden": false, "className": "LegacyBillingProcessor", "methodName": "processPayments"}, "destination": {"id": "BillingDBshard2", "isHidden": false, "className": "BillingDB", "methodName": "shard2"}}, {"source": {"id": "NewBillingProcessorprocessPayments", "isHidden": false, "className": "NewBillingProcessor", "methodName": "processPayments"}, "destination": {"id": "BillingDBshard1", "isHidden": false, "className": "BillingDB", "methodName": "shard1"}}, {"source": {"id": "NewBillingProcessorprocessPayments", "isHidden": false, "className": "NewBillingProcessor", "methodName": "processPayments"}, "destination": {"id": "BillingDBshard2", "isHidden": false, "className": "BillingDB", "methodName": "shard2"}}]}, "isDifferentThanBefore": true}, "display": {"resolutionNodeMap": {"LOW": {"billing processor": {"style": {"width": "600px", "height": "221px"}, "position": {"x": 712, "y": 12}}, "13423abbe62b053d18fb5bcada2d72d7_1": {"style": {"width": "500px", "height": "221px", "borderColor": "rgba(144, 152, 160, 0.65)", "backgroundColor": "rgba(134, 142, 150, 0.1)"}, "position": {"x": 100, "y": 120}}, "33cbc8583cdbf983cb7a573dc36f6230_1": {"style": {"width": "500px", "height": "221px", "borderColor": "rgba(255, 136, 30, 0.65)", "backgroundColor": "rgba(253, 126, 20, 0.1)"}, "position": {"x": 100, "y": 441}}, "acebd7731f7751384415d9276e500c51_1": {"style": {"width": "500px", "height": "221px", "borderColor": "rgba(86, 120, 255, 0.65)", "backgroundColor": "rgba(76, 110, 245, 0.1)"}, "position": {"x": 1512, "y": 12}}, "d8d039868a0ed5cb53df60e7069a2da6_1": {"style": {"width": "500px", "height": "221px"}, "position": {"x": 12, "y": 12}}, "acebd7731f7751384415d9276e500c51_1shard1": {"style": {"width": "300px", "height": "325.6666666666667px"}, "position": {"x": 94.86982097186774, "y": 118.99357985348922}}, "acebd7731f7751384415d9276e500c51_1shard2": {"style": {"width": "300px", "height": "325.6666666666667px"}, "position": {"x": 95.07884748423294, "y": 459.4527484741504}}, "d8d039868a0ed5cb53df60e7069a2da6_1payout": {"style": {"width": "300px", "height": "400.66666666666663px"}, "position": {"x": 100, "y": 120}}, "13423abbe62b053d18fb5bcada2d72d7_1processPayments": {"style": {"width": "300px", "height": "378.6666666666667px"}, "position": {"x": 100, "y": 120}}, "33cbc8583cdbf983cb7a573dc36f6230_1processPayments": {"style": {"width": "300px", "height": "403.6666666666667px"}, "position": {"x": 100, "y": 120}}}, "HIGH": {"billing processor": {"style": {"width": "950px", "height": "1542.6666666666667px"}, "position": {"x": 962, "y": 12}}, "13423abbe62b053d18fb5bcada2d72d7_1": {"style": {"width": "500px", "height": "598.6666666666667px", "borderColor": "rgba(144, 152, 160, 0.65)", "backgroundColor": "rgba(134, 142, 150, 0.1)"}, "position": {"x": 225, "y": 120}}, "33cbc8583cdbf983cb7a573dc36f6230_1": {"style": {"width": "500px", "height": "623.6666666666667px", "borderColor": "rgba(255, 136, 30, 0.65)", "backgroundColor": "rgba(253, 126, 20, 0.1)"}, "position": {"x": 225, "y": 819}}, "acebd7731f7751384415d9276e500c51_1": {"style": {"width": "500px", "height": "971.6666666666667px", "borderColor": "rgba(86, 120, 255, 0.65)", "backgroundColor": "rgba(76, 110, 245, 0.1)"}, "position": {"x": 2362, "y": 444}}, "d8d039868a0ed5cb53df60e7069a2da6_1": {"style": {"width": "500px", "height": "620.6666666666666px"}, "position": {"x": 12, "y": 833}}, "acebd7731f7751384415d9276e500c51_1shard1": {"style": {"width": "300px", "height": "325.6666666666667px"}, "position": {"x": 100, "y": 120}}, "acebd7731f7751384415d9276e500c51_1shard2": {"style": {"width": "300px", "height": "325.6666666666667px"}, "position": {"x": 100, "y": 546}}, "d8d039868a0ed5cb53df60e7069a2da6_1payout": {"style": {"width": "300px", "height": "400.66666666666663px"}, "position": {"x": 100, "y": 120}}, "13423abbe62b053d18fb5bcada2d72d7_1processPayments": {"style": {"width": "300px", "height": "378.6666666666667px"}, "position": {"x": 100, "y": 120}}, "33cbc8583cdbf983cb7a573dc36f6230_1processPayments": {"style": {"width": "300px", "height": "403.6666666666667px"}, "position": {"x": 100, "y": 120}}}, "MEDIUM": {"billing processor": {"style": {"width": "700px", "height": "762px"}, "position": {"x": 837, "y": 12}}, "13423abbe62b053d18fb5bcada2d72d7_1": {"style": {"width": "500px", "height": "221px", "borderColor": "rgba(144, 152, 160, 0.65)", "backgroundColor": "rgba(134, 142, 150, 0.1)"}, "position": {"x": 100, "y": 120}}, "33cbc8583cdbf983cb7a573dc36f6230_1": {"style": {"width": "500px", "height": "221px", "borderColor": "rgba(255, 136, 30, 0.65)", "backgroundColor": "rgba(253, 126, 20, 0.1)"}, "position": {"x": 100, "y": 441}}, "acebd7731f7751384415d9276e500c51_1": {"style": {"width": "500px", "height": "221px", "borderColor": "rgba(86, 120, 255, 0.65)", "backgroundColor": "rgba(76, 110, 245, 0.1)"}, "position": {"x": 1862, "y": 453}}, "d8d039868a0ed5cb53df60e7069a2da6_1": {"style": {"width": "500px", "height": "221px"}, "position": {"x": 12, "y": 453}}, "acebd7731f7751384415d9276e500c51_1shard1": {"style": {"width": "300px", "height": "325.6666666666667px"}, "position": {"x": 94.86982097186774, "y": 118.99357985348922}}, "acebd7731f7751384415d9276e500c51_1shard2": {"style": {"width": "300px", "height": "325.6666666666667px"}, "position": {"x": 95.07884748423294, "y": 459.4527484741504}}, "d8d039868a0ed5cb53df60e7069a2da6_1payout": {"style": {"width": "300px", "height": "400.66666666666663px"}, "position": {"x": 100, "y": 120}}, "13423abbe62b053d18fb5bcada2d72d7_1processPayments": {"style": {"width": "300px", "height": "378.6666666666667px"}, "position": {"x": 100, "y": 120}}, "33cbc8583cdbf983cb7a573dc36f6230_1processPayments": {"style": {"width": "300px", "height": "403.6666666666667px"}, "position": {"x": 100, "y": 120}}}}}, "project": [{"path": "app/billing-system.ts", "type": "file", "value": "type Payment = {\n    id: string,\n    amount: number\n};\n\n@Injectable\nclass BillingDB {\n    shard1(): Payment[] {\n        return [\n            {\n                id: ''1'',\n                amount: 23\n            },\n            {\n                id: ''2'',\n                amount: 21\n            },\n        ];\n    }\n\n    shard2(): Payment[] {\n        return [\n            {\n                id: ''6'',\n                amount: 12\n            },\n        ];\n    }\n}"}, {"path": "app/payout.ts", "type": "file", "value": "@Injectable\nclass PayoutService {\n    legacyBillingProcessor = std.resolve(LegacyBillingProcessor);\n    newBillingProcessor = std.resolve(NewBillingProcessor);\n    \n    /** \n     * We race the old and the new, and use the result of\n     * whoever gets here first.\n    */\n    payout() {\n        const legacyFlow = std.flow(\n            ''Legacy billing System'', this.legacyBillingProcessor\n        ).processPayments();\n\n        const newFlow = std.flow(\n            ''New billing System'', this.newBillingProcessor\n        ).processPayments();\n\n        const processedPayments = std.awaitRace([\n            legacyFlow,\n            newFlow\n        ]);\n\n        std.log(''Got all the payments'', processedPayments);\n        std.log(''Given we are racing flows & we just received our result, one of them should be cancelled now.'')\n\n        return processedPayments;\n    }\n}"}, {"path": "app/billing processor/billing-processor.ts", "type": "file", "value": "@Injectable\nclass LegacyBillingProcessor {\n    billingDB = std.resolve(BillingDB);\n    \n    /** \n     * A little slow\n    */\n    processPayments() {\n        const getDataFromShard1 = std.flow(''Get from shard1 [legacy]'', this.billingDB).shard1();\n        const getDataFromShard2 = std.flow(''Get from shard2 [legacy]'', this.billingDB).shard2();\n\n        /** \n         * We are waiting for data from both the flows\n        */\n        const allPayments = std.awaitAll([\n            getDataFromShard1,\n            getDataFromShard2,\n        ]);\n\n        //This is a legacy system, so a little slow.\n        std.sleep(8);\n\n        return allPayments.flat();\n    }\n}\n\n@Injectable\nclass NewBillingProcessor {\n    billingDB = std.resolve(BillingDB);\n    \n    /** \n     * A little faster. Re-written in rust :D\n    */\n    processPayments() {\n        const getDataFromShard1 = std.flow(''Get from shard1 [new]'', this.billingDB).shard1();\n        const getDataFromShard2 = std.flow(''Get from shard2 [new]'', this.billingDB).shard2();\n\n        /** \n         * We are waiting for data from both the flows\n        */\n        const allPayments = std.awaitAll([\n            getDataFromShard1,\n            getDataFromShard2,\n        ]);\n\n        return allPayments.flat();\n    }\n}"}], "storySetups": [{"id": "0", "title": "New system wins", "script": {"raw": "std.flow(''Payout'', std.resolve(PayoutService)).payout().run()", "compiled": "std.flow(''Payout'', std.resolve(PayoutService)).payout().run();\n"}, "edgeMap": {}, "resolutionNodeMap": {"LOW": {"billing processor": {"iconData": {"iconString": "logos:aws-ec2", "iconColorVariant": "dark"}}, "13423abbe62b053d18fb5bcada2d72d7_1": {"iconData": {"iconString": "tdesign:money", "iconColorVariant": "dark"}, "backgroundColor": "#868e96"}, "33cbc8583cdbf983cb7a573dc36f6230_1": {"iconData": {"iconString": "tdesign:money", "iconColorVariant": "dark"}, "backgroundColor": "#fd7e14"}, "acebd7731f7751384415d9276e500c51_1": {"iconData": {"iconString": "logos:mysql", "iconColorVariant": "dark"}, "backgroundColor": "#4c6ef5"}, "d8d039868a0ed5cb53df60e7069a2da6_1": {"iconData": {"iconString": "solar:graph-down-bold", "iconColorVariant": "dark"}}, "acebd7731f7751384415d9276e500c51_1shard1": {"iconData": {"iconString": "ph:table", "iconColorVariant": "dark"}}, "acebd7731f7751384415d9276e500c51_1shard2": {"iconData": {"iconString": "ph:table", "iconColorVariant": "dark"}}, "d8d039868a0ed5cb53df60e7069a2da6_1payout": {"iconData": {"iconString": "material-symbols:outbox", "iconColorVariant": "dark"}}, "13423abbe62b053d18fb5bcada2d72d7_1processPayments": {"iconData": {"iconString": "devicon:nodejs", "iconColorVariant": "dark"}}, "33cbc8583cdbf983cb7a573dc36f6230_1processPayments": {"iconData": {"iconString": "skill-icons:rust", "iconColorVariant": "dark"}}}, "HIGH": {"billing processor": {"style": {"width": "950px", "height": "1580px"}, "iconData": {"iconString": "logos:aws-ec2", "iconColorVariant": "dark"}, "position": {"x": 703.4336974346061, "y": -52.64157564134848}}, "13423abbe62b053d18fb5bcada2d72d7_1": {"iconData": {"iconString": "tdesign:money", "iconColorVariant": "dark"}, "position": {"x": 238.00770122453017, "y": 113.81976201183022}, "backgroundColor": "#868e96"}, "33cbc8583cdbf983cb7a573dc36f6230_1": {"iconData": {"iconString": "tdesign:money", "iconColorVariant": "dark"}, "position": {"x": 233.1316014802851, "y": 803.0632047722345}, "backgroundColor": "#fd7e14"}, "acebd7731f7751384415d9276e500c51_1": {"style": {"width": "500px", "height": "814px"}, "iconData": {"iconString": "logos:mysql", "iconColorVariant": "dark"}, "position": {"x": 1722.859596056392, "y": 271.0549097235282}, "backgroundColor": "#4c6ef5"}, "d8d039868a0ed5cb53df60e7069a2da6_1": {"iconData": {"iconString": "solar:graph-down-bold", "iconColorVariant": "dark"}, "position": {"x": 100.82074921213234, "y": 414.5938598826863}}, "acebd7731f7751384415d9276e500c51_1shard1": {"iconData": {"iconString": "ph:table", "iconColorVariant": "dark"}, "position": {"x": 94.86982097186774, "y": 118.99357985348922}}, "acebd7731f7751384415d9276e500c51_1shard2": {"iconData": {"iconString": "ph:table", "iconColorVariant": "dark"}, "position": {"x": 95.07884748423294, "y": 459.4527484741504}}, "d8d039868a0ed5cb53df60e7069a2da6_1payout": {"iconData": {"iconString": "material-symbols:outbox", "iconColorVariant": "dark"}}, "13423abbe62b053d18fb5bcada2d72d7_1processPayments": {"iconData": {"iconString": "devicon:nodejs", "iconColorVariant": "dark"}}, "33cbc8583cdbf983cb7a573dc36f6230_1processPayments": {"iconData": {"iconString": "skill-icons:rust", "iconColorVariant": "dark"}}}, "MEDIUM": {"billing processor": {"iconData": {"iconString": "logos:aws-ec2", "iconColorVariant": "dark"}}, "13423abbe62b053d18fb5bcada2d72d7_1": {"iconData": {"iconString": "tdesign:money", "iconColorVariant": "dark"}, "backgroundColor": "#868e96"}, "33cbc8583cdbf983cb7a573dc36f6230_1": {"iconData": {"iconString": "tdesign:money", "iconColorVariant": "dark"}, "backgroundColor": "#fd7e14"}, "acebd7731f7751384415d9276e500c51_1": {"iconData": {"iconString": "logos:mysql", "iconColorVariant": "dark"}, "backgroundColor": "#4c6ef5"}, "d8d039868a0ed5cb53df60e7069a2da6_1": {"iconData": {"iconString": "solar:graph-down-bold", "iconColorVariant": "dark"}}, "acebd7731f7751384415d9276e500c51_1shard1": {"iconData": {"iconString": "ph:table", "iconColorVariant": "dark"}}, "acebd7731f7751384415d9276e500c51_1shard2": {"iconData": {"iconString": "ph:table", "iconColorVariant": "dark"}}, "d8d039868a0ed5cb53df60e7069a2da6_1payout": {"iconData": {"iconString": "material-symbols:outbox", "iconColorVariant": "dark"}}, "13423abbe62b053d18fb5bcada2d72d7_1processPayments": {"iconData": {"iconString": "devicon:nodejs", "iconColorVariant": "dark"}}, "33cbc8583cdbf983cb7a573dc36f6230_1processPayments": {"iconData": {"iconString": "skill-icons:rust", "iconColorVariant": "dark"}}}}}]}');
INSERT INTO public.project_templates (id, name, description, created_at, updated_at, project_art, project_artifacts) VALUES (4, 'A polling system', 'A simple workflow involving databases and polling. This introduces Scheduled flows.', '2024-08-14 08:45:33.394826', '2024-08-14 08:45:33.394826', '{"iconString": "ri:timer-flash-fill", "iconColorVariant": "dark"}', '{"build": {"state": "built", "artificats": {"bundle": "class OrderService {\n    async *addOrders(order) {\n        var __90991_metz_context = arguments[arguments.length - 1];\n        [order] = yield { command: \"load\", startingAddress: this.__starting_address, offset: \"addOrders\", params: Array.from(arguments).slice(0, arguments.length-1), context: __90991_metz_context };\n        (yield * this.ordersTable.insert(order, { isDependency: false, flowId: __90991_metz_context.flowId }));\n        return yield { command: \"unload\", startingAddress: this.__starting_address, offset: \"addOrders\", returnValue: undefined };\n    }\n    constructor() {\n        this.ordersTable = std.resolve(OrdersTable);\n        __runtime.registerInstance(this);\n        std.flow(''Poller 1'', new Poller(), { every: 2 }).poll();\n        std.flow(''Poller 2'', new Poller(), { every: 2 }).poll();\n    }\n}\n/**\n * Auto generated code for a relational db table.\n *\n * You can update this comment block and it will reflect\n * it as description on the playground!\n*/\nclass OrdersTable {\n    async *insert(recordToInsert) {\n        var __90991_metz_context = arguments[arguments.length - 1];\n        [recordToInsert] = yield { command: \"load\", startingAddress: this.__starting_address, offset: \"insert\", params: Array.from(arguments).slice(0, arguments.length-1), context: __90991_metz_context };\n        const record = {\n            ...recordToInsert,\n            createdAt: std.currentTick(),\n        };\n        this.data.push(record);\n        return yield { command: \"unload\", startingAddress: this.__starting_address, offset: \"insert\", returnValue: record };\n    }\n    async *find(predicate) {\n        var __90991_metz_context = arguments[arguments.length - 1];\n        [predicate] = yield { command: \"load\", startingAddress: this.__starting_address, offset: \"find\", params: Array.from(arguments).slice(0, arguments.length-1), context: __90991_metz_context };\n        return yield { command: \"unload\", startingAddress: this.__starting_address, offset: \"find\", returnValue: this.data.find(predicate) };\n    }\n    async *findAll(predicate) {\n        var __90991_metz_context = arguments[arguments.length - 1];\n        [predicate] = yield { command: \"load\", startingAddress: this.__starting_address, offset: \"findAll\", params: Array.from(arguments).slice(0, arguments.length-1), context: __90991_metz_context };\n        return yield { command: \"unload\", startingAddress: this.__starting_address, offset: \"findAll\", returnValue: this.data.filter(predicate) };\n    }\n    async *update(partialUpdate, predicate) {\n        var __90991_metz_context = arguments[arguments.length - 1];\n        [partialUpdate, predicate] = yield { command: \"load\", startingAddress: this.__starting_address, offset: \"update\", params: Array.from(arguments).slice(0, arguments.length-1), context: __90991_metz_context };\n        const indexOfRecord = this.data.findIndex(predicate);\n        if (indexOfRecord < 0) {\n            return yield { command: \"unload\", startingAddress: this.__starting_address, offset: \"update\", returnValue: undefined };\n        }\n        const existingRecord = this.data[indexOfRecord];\n        const updatedRecord = {\n            ...existingRecord,\n            ...partialUpdate,\n        };\n        this.data[indexOfRecord] = updatedRecord;\n        return yield { command: \"unload\", startingAddress: this.__starting_address, offset: \"update\", returnValue: updatedRecord };\n    }\n    async *delete(predicate) {\n        var __90991_metz_context = arguments[arguments.length - 1];\n        [predicate] = yield { command: \"load\", startingAddress: this.__starting_address, offset: \"delete\", params: Array.from(arguments).slice(0, arguments.length-1), context: __90991_metz_context };\n        const index = this.data.findIndex(predicate);\n        if (index < 0) {\n            return yield { command: \"unload\", startingAddress: this.__starting_address, offset: \"delete\", returnValue: undefined };\n        }\n        this.data.splice(index, 1);\n        return yield { command: \"unload\", startingAddress: this.__starting_address, offset: \"delete\", returnValue: undefined };\n    }\n    constructor() {\n        this.data = [];\n        __runtime.registerInstance(this);\n    }\n}\n/**\n * Auto generated code for a NoSQL collection.\n *\n * You can update this comment block and it will reflect\n * it as description on the playground!\n*/\nclass PollingCollection {\n    async *insert(recordToInsert) {\n        var __90991_metz_context = arguments[arguments.length - 1];\n        [recordToInsert] = yield { command: \"load\", startingAddress: this.__starting_address, offset: \"insert\", params: Array.from(arguments).slice(0, arguments.length-1), context: __90991_metz_context };\n        const record = {\n            ...recordToInsert,\n            createdAt: std.currentTick(),\n        };\n        this.data.push(record);\n        return yield { command: \"unload\", startingAddress: this.__starting_address, offset: \"insert\", returnValue: record };\n    }\n    async *find(predicate) {\n        var __90991_metz_context = arguments[arguments.length - 1];\n        [predicate] = yield { command: \"load\", startingAddress: this.__starting_address, offset: \"find\", params: Array.from(arguments).slice(0, arguments.length-1), context: __90991_metz_context };\n        return yield { command: \"unload\", startingAddress: this.__starting_address, offset: \"find\", returnValue: this.data.find(predicate) };\n    }\n    async *findAll(predicate) {\n        var __90991_metz_context = arguments[arguments.length - 1];\n        [predicate] = yield { command: \"load\", startingAddress: this.__starting_address, offset: \"findAll\", params: Array.from(arguments).slice(0, arguments.length-1), context: __90991_metz_context };\n        return yield { command: \"unload\", startingAddress: this.__starting_address, offset: \"findAll\", returnValue: this.data.filter(predicate) };\n    }\n    async *update(partialUpdate, predicate) {\n        var __90991_metz_context = arguments[arguments.length - 1];\n        [partialUpdate, predicate] = yield { command: \"load\", startingAddress: this.__starting_address, offset: \"update\", params: Array.from(arguments).slice(0, arguments.length-1), context: __90991_metz_context };\n        const indexOfRecord = this.data.findIndex(predicate);\n        if (indexOfRecord < 0) {\n            return yield { command: \"unload\", startingAddress: this.__starting_address, offset: \"update\", returnValue: undefined };\n        }\n        const existingRecord = this.data[indexOfRecord];\n        const updatedRecord = {\n            ...existingRecord,\n            ...partialUpdate,\n        };\n        this.data[indexOfRecord] = updatedRecord;\n        return yield { command: \"unload\", startingAddress: this.__starting_address, offset: \"update\", returnValue: updatedRecord };\n    }\n    async *delete(predicate) {\n        var __90991_metz_context = arguments[arguments.length - 1];\n        [predicate] = yield { command: \"load\", startingAddress: this.__starting_address, offset: \"delete\", params: Array.from(arguments).slice(0, arguments.length-1), context: __90991_metz_context };\n        const index = this.data.findIndex(predicate);\n        if (index < 0) {\n            return yield { command: \"unload\", startingAddress: this.__starting_address, offset: \"delete\", returnValue: undefined };\n        }\n        this.data.splice(index, 1);\n        return yield { command: \"unload\", startingAddress: this.__starting_address, offset: \"delete\", returnValue: undefined };\n    }\n    constructor() {\n        this.data = [];\n        __runtime.registerInstance(this);\n    }\n}\nclass Poller {\n    async *poll() {\n        var __90991_metz_context = arguments[arguments.length - 1];\n        [] = yield { command: \"load\", startingAddress: this.__starting_address, offset: \"poll\", params: Array.from(arguments).slice(0, arguments.length-1), context: __90991_metz_context };\n        const updatedOrder = (yield * this.ordersTable.update({\n            status: ''processing''\n        }, std.lambda(order => order.status === ''pending''), { isDependency: true, flowId: __90991_metz_context.flowId }));\n        if (updatedOrder) {\n            yield { command: \"log\", startingAddress: this.__starting_address, offset: \"poll\", logs: [''Got an order!''] };\n            (yield * this.pollingCollection.insert({\n                id: `poll_${updatedOrder.id}`,\n                order_id: updatedOrder.id\n            }, { isDependency: false, flowId: __90991_metz_context.flowId }));\n        }\n        return yield { command: \"unload\", startingAddress: this.__starting_address, offset: \"poll\", returnValue: undefined };\n    }\n    constructor() {\n        this.ordersTable = std.resolve(OrdersTable);\n        this.pollingCollection = std.resolve(PollingCollection);\n        __runtime.registerInstance(this);\n    }\n}\n\n({\n                    classyKeywords: [{\n                        className: ''OrderService'',\n                        properties: [{\"name\":\"ordersTable\",\"show\":false}],\n                        comment: ``,\n                        flags: {\"isMarked\":true,\"isHidden\":false,\"isConstructorBased\":false},\n                        filePath: ''app/order-service.ts'',\n                        methods: [{\"methodName\":\"addOrders\",\"comment\":\"\",\"signature\":\"(order: Omit<Order, \\\"createdAt\\\">) => void\",\"parameters\":[{\"name\":\"order\",\"type\":\"Omit<Order, \\\"createdAt\\\">\",\"text\":\"order: Omit<Order, ''createdAt''>\"}],\"returnType\":\"void\",\"flags\":{\"isMarked\":true,\"isHidden\":false,\"delegateToParent\":false}}],\n                        class: OrderService,\n                    },{\n                        className: ''OrdersTable'',\n                        properties: [{\"name\":\"data\",\"show\":true}],\n                        comment: `Auto generated code for a relational db table.\n\nYou can update this comment block and it will reflect\nit as description on the playground!`,\n                        flags: {\"isMarked\":true,\"isHidden\":false,\"isConstructorBased\":false,\"view\":{\"type\":\"table\",\"columns\":[\"id\",\"thing\",\"status\",\"createdAt\"]},\"collapsed\":true},\n                        filePath: ''app/orders-table.ts'',\n                        methods: [{\"methodName\":\"insert\",\"comment\":\"\",\"signature\":\"(recordToInsert: Omit<Order, \\\"createdAt\\\">) => Order\",\"parameters\":[{\"name\":\"recordToInsert\",\"type\":\"Omit<Order, \\\"createdAt\\\">\",\"text\":\"recordToInsert: Omit<Order, ''createdAt''>\"}],\"returnType\":\"Order\",\"flags\":{\"isMarked\":true,\"isHidden\":false,\"delegateToParent\":true}},{\"methodName\":\"find\",\"comment\":\"\",\"signature\":\"(predicate: (record: Order) => boolean) => Order | undefined\",\"parameters\":[{\"name\":\"predicate\",\"type\":\"(record: Order) => boolean\",\"text\":\"predicate: (record: Order) => boolean\"}],\"returnType\":\"Order | undefined\",\"flags\":{\"isMarked\":true,\"isHidden\":false,\"delegateToParent\":true}},{\"methodName\":\"findAll\",\"comment\":\"\",\"signature\":\"(predicate: (record: Order) => boolean) => Order[]\",\"parameters\":[{\"name\":\"predicate\",\"type\":\"(record: Order) => boolean\",\"text\":\"predicate: (record: Order) => boolean\"}],\"returnType\":\"Order[]\",\"flags\":{\"isMarked\":true,\"isHidden\":false,\"delegateToParent\":true}},{\"methodName\":\"update\",\"comment\":\"\",\"signature\":\"(partialUpdate: Partial<Order>, predicate: (record: Order) => boolean) => { id: string; thing: string; status: \\\"pending\\\" | \\\"processing\\\" | \\\"done\\\"; createdAt: number; } | undefined\",\"parameters\":[{\"name\":\"partialUpdate\",\"type\":\"Partial<Order>\",\"text\":\"partialUpdate: Partial<Order>\"},{\"name\":\"predicate\",\"type\":\"(record: Order) => boolean\",\"text\":\"predicate: (record: Order) => boolean\"}],\"returnType\":\"{ id: string; thing: string; status: \\\"pending\\\" | \\\"processing\\\" | \\\"done\\\"; createdAt: number; } | undefined\",\"flags\":{\"isMarked\":true,\"isHidden\":false,\"delegateToParent\":true}},{\"methodName\":\"delete\",\"comment\":\"\",\"signature\":\"(predicate: (record: Order) => boolean) => void\",\"parameters\":[{\"name\":\"predicate\",\"type\":\"(record: Order) => boolean\",\"text\":\"predicate: (record: Order) => boolean\"}],\"returnType\":\"void\",\"flags\":{\"isMarked\":true,\"isHidden\":false,\"delegateToParent\":true}}],\n                        class: OrdersTable,\n                    },{\n                        className: ''PollingCollection'',\n                        properties: [{\"name\":\"data\",\"show\":true}],\n                        comment: `Auto generated code for a NoSQL collection.\n\nYou can update this comment block and it will reflect\nit as description on the playground!`,\n                        flags: {\"isMarked\":true,\"isHidden\":false,\"isConstructorBased\":false,\"view\":{\"type\":\"collection\"},\"collapsed\":true},\n                        filePath: ''app/polling-table.ts'',\n                        methods: [{\"methodName\":\"insert\",\"comment\":\"\",\"signature\":\"(recordToInsert: Omit<OrderPoll, \\\"createdAt\\\">) => OrderPoll\",\"parameters\":[{\"name\":\"recordToInsert\",\"type\":\"Omit<OrderPoll, \\\"createdAt\\\">\",\"text\":\"recordToInsert: Omit<OrderPoll, ''createdAt''>\"}],\"returnType\":\"OrderPoll\",\"flags\":{\"isMarked\":true,\"isHidden\":false,\"delegateToParent\":true}},{\"methodName\":\"find\",\"comment\":\"\",\"signature\":\"(predicate: (record: OrderPoll) => boolean) => OrderPoll | undefined\",\"parameters\":[{\"name\":\"predicate\",\"type\":\"(record: OrderPoll) => boolean\",\"text\":\"predicate: (record: OrderPoll) => boolean\"}],\"returnType\":\"OrderPoll | undefined\",\"flags\":{\"isMarked\":true,\"isHidden\":false,\"delegateToParent\":true}},{\"methodName\":\"findAll\",\"comment\":\"\",\"signature\":\"(predicate: (record: OrderPoll) => boolean) => OrderPoll[]\",\"parameters\":[{\"name\":\"predicate\",\"type\":\"(record: OrderPoll) => boolean\",\"text\":\"predicate: (record: OrderPoll) => boolean\"}],\"returnType\":\"OrderPoll[]\",\"flags\":{\"isMarked\":true,\"isHidden\":false,\"delegateToParent\":true}},{\"methodName\":\"update\",\"comment\":\"\",\"signature\":\"(partialUpdate: Partial<OrderPoll>, predicate: (record: OrderPoll) => boolean) => { id: string; order_id: string; createdAt: number; } | undefined\",\"parameters\":[{\"name\":\"partialUpdate\",\"type\":\"Partial<OrderPoll>\",\"text\":\"partialUpdate: Partial<OrderPoll>\"},{\"name\":\"predicate\",\"type\":\"(record: OrderPoll) => boolean\",\"text\":\"predicate: (record: OrderPoll) => boolean\"}],\"returnType\":\"{ id: string; order_id: string; createdAt: number; } | undefined\",\"flags\":{\"isMarked\":true,\"isHidden\":false,\"delegateToParent\":true}},{\"methodName\":\"delete\",\"comment\":\"\",\"signature\":\"(predicate: (record: OrderPoll) => boolean) => void\",\"parameters\":[{\"name\":\"predicate\",\"type\":\"(record: OrderPoll) => boolean\",\"text\":\"predicate: (record: OrderPoll) => boolean\"}],\"returnType\":\"void\",\"flags\":{\"isMarked\":true,\"isHidden\":false,\"delegateToParent\":true}}],\n                        class: PollingCollection,\n                    },{\n                        className: ''Poller'',\n                        properties: [{\"name\":\"ordersTable\",\"show\":false},{\"name\":\"pollingCollection\",\"show\":false}],\n                        comment: ``,\n                        flags: {\"isMarked\":true,\"isHidden\":false,\"isConstructorBased\":true},\n                        filePath: ''app/poller.ts'',\n                        methods: [{\"methodName\":\"poll\",\"comment\":\"\",\"signature\":\"() => void\",\"parameters\":[],\"returnType\":\"void\",\"flags\":{\"isMarked\":true,\"isHidden\":false,\"delegateToParent\":false}}],\n                        class: Poller,\n                    }]\n                })", "keywords": [{"flags": {"isHidden": false, "isMarked": true, "isConstructorBased": false}, "comment": "", "methods": [{"flags": {"isHidden": false, "isMarked": true, "delegateToParent": false}, "comment": "", "signature": "(order: Omit<Order, \"createdAt\">) => void", "methodName": "addOrders", "parameters": [{"name": "order", "text": "order: Omit<Order, ''createdAt''>", "type": "Omit<Order, \"createdAt\">"}], "returnType": "void"}], "filePath": "app/order-service.ts", "className": "OrderService", "properties": [{"name": "ordersTable", "show": false}], "channelEmitters": [], "typeParametersLength": 0}, {"flags": {"view": {"type": "table", "columns": ["id", "thing", "status", "createdAt"]}, "isHidden": false, "isMarked": true, "collapsed": true, "isConstructorBased": false}, "comment": "Auto generated code for a relational db table.\n\nYou can update this comment block and it will reflect\nit as description on the playground!", "methods": [{"flags": {"isHidden": false, "isMarked": true, "delegateToParent": true}, "comment": "", "signature": "(recordToInsert: Omit<Order, \"createdAt\">) => Order", "methodName": "insert", "parameters": [{"name": "recordToInsert", "text": "recordToInsert: Omit<Order, ''createdAt''>", "type": "Omit<Order, \"createdAt\">"}], "returnType": "Order"}, {"flags": {"isHidden": false, "isMarked": true, "delegateToParent": true}, "comment": "", "signature": "(predicate: (record: Order) => boolean) => Order | undefined", "methodName": "find", "parameters": [{"name": "predicate", "text": "predicate: (record: Order) => boolean", "type": "(record: Order) => boolean"}], "returnType": "Order | undefined"}, {"flags": {"isHidden": false, "isMarked": true, "delegateToParent": true}, "comment": "", "signature": "(predicate: (record: Order) => boolean) => Order[]", "methodName": "findAll", "parameters": [{"name": "predicate", "text": "predicate: (record: Order) => boolean", "type": "(record: Order) => boolean"}], "returnType": "Order[]"}, {"flags": {"isHidden": false, "isMarked": true, "delegateToParent": true}, "comment": "", "signature": "(partialUpdate: Partial<Order>, predicate: (record: Order) => boolean) => { id: string; thing: string; status: \"pending\" | \"processing\" | \"done\"; createdAt: number; } | undefined", "methodName": "update", "parameters": [{"name": "partialUpdate", "text": "partialUpdate: Partial<Order>", "type": "Partial<Order>"}, {"name": "predicate", "text": "predicate: (record: Order) => boolean", "type": "(record: Order) => boolean"}], "returnType": "{ id: string; thing: string; status: \"pending\" | \"processing\" | \"done\"; createdAt: number; } | undefined"}, {"flags": {"isHidden": false, "isMarked": true, "delegateToParent": true}, "comment": "", "signature": "(predicate: (record: Order) => boolean) => void", "methodName": "delete", "parameters": [{"name": "predicate", "text": "predicate: (record: Order) => boolean", "type": "(record: Order) => boolean"}], "returnType": "void"}], "filePath": "app/orders-table.ts", "className": "OrdersTable", "properties": [{"name": "data", "show": true}], "channelEmitters": [], "typeParametersLength": 0}, {"flags": {"view": {"type": "collection"}, "isHidden": false, "isMarked": true, "collapsed": true, "isConstructorBased": false}, "comment": "Auto generated code for a NoSQL collection.\n\nYou can update this comment block and it will reflect\nit as description on the playground!", "methods": [{"flags": {"isHidden": false, "isMarked": true, "delegateToParent": true}, "comment": "", "signature": "(recordToInsert: Omit<OrderPoll, \"createdAt\">) => OrderPoll", "methodName": "insert", "parameters": [{"name": "recordToInsert", "text": "recordToInsert: Omit<OrderPoll, ''createdAt''>", "type": "Omit<OrderPoll, \"createdAt\">"}], "returnType": "OrderPoll"}, {"flags": {"isHidden": false, "isMarked": true, "delegateToParent": true}, "comment": "", "signature": "(predicate: (record: OrderPoll) => boolean) => OrderPoll | undefined", "methodName": "find", "parameters": [{"name": "predicate", "text": "predicate: (record: OrderPoll) => boolean", "type": "(record: OrderPoll) => boolean"}], "returnType": "OrderPoll | undefined"}, {"flags": {"isHidden": false, "isMarked": true, "delegateToParent": true}, "comment": "", "signature": "(predicate: (record: OrderPoll) => boolean) => OrderPoll[]", "methodName": "findAll", "parameters": [{"name": "predicate", "text": "predicate: (record: OrderPoll) => boolean", "type": "(record: OrderPoll) => boolean"}], "returnType": "OrderPoll[]"}, {"flags": {"isHidden": false, "isMarked": true, "delegateToParent": true}, "comment": "", "signature": "(partialUpdate: Partial<OrderPoll>, predicate: (record: OrderPoll) => boolean) => { id: string; order_id: string; createdAt: number; } | undefined", "methodName": "update", "parameters": [{"name": "partialUpdate", "text": "partialUpdate: Partial<OrderPoll>", "type": "Partial<OrderPoll>"}, {"name": "predicate", "text": "predicate: (record: OrderPoll) => boolean", "type": "(record: OrderPoll) => boolean"}], "returnType": "{ id: string; order_id: string; createdAt: number; } | undefined"}, {"flags": {"isHidden": false, "isMarked": true, "delegateToParent": true}, "comment": "", "signature": "(predicate: (record: OrderPoll) => boolean) => void", "methodName": "delete", "parameters": [{"name": "predicate", "text": "predicate: (record: OrderPoll) => boolean", "type": "(record: OrderPoll) => boolean"}], "returnType": "void"}], "filePath": "app/polling-table.ts", "className": "PollingCollection", "properties": [{"name": "data", "show": true}], "channelEmitters": [], "typeParametersLength": 0}, {"flags": {"isHidden": false, "isMarked": true, "isConstructorBased": true}, "comment": "", "methods": [{"flags": {"isHidden": false, "isMarked": true, "delegateToParent": false}, "comment": "", "signature": "() => void", "methodName": "poll", "parameters": [], "returnType": "void"}], "filePath": "app/poller.ts", "className": "Poller", "properties": [{"name": "ordersTable", "show": false}, {"name": "pollingCollection", "show": false}], "channelEmitters": [], "typeParametersLength": 0}], "projectVersion": 0, "callHierarchyContainer": [{"source": {"id": "OrderServiceaddOrders", "isHidden": false, "className": "OrderService", "methodName": "addOrders"}, "destination": {"id": "OrdersTableinsert", "isHidden": false, "className": "OrdersTable", "methodName": "insert"}}, {"source": {"id": "Pollerpoll", "isHidden": false, "className": "Poller", "methodName": "poll"}, "destination": {"id": "OrdersTableupdate", "isHidden": false, "className": "OrdersTable", "methodName": "update"}}, {"source": {"id": "Pollerpoll", "isHidden": false, "className": "Poller", "methodName": "poll"}, "destination": {"id": "PollingCollectioninsert", "isHidden": false, "className": "PollingCollection", "methodName": "insert"}}]}, "isDifferentThanBefore": true}, "display": {"resolutionNodeMap": {"LOW": {"32d245b57fc6466ec360267e689eb9fc_1": {"style": {"width": "500px", "height": "221px", "borderColor": "rgba(28, 194, 144, 0.65)", "backgroundColor": "rgba(18, 184, 134, 0.1)"}, "position": {"x": 712, "y": 854}}, "393049eb67ef6fee9f90775ca641ef66_1": {"style": {"width": "500px", "height": "221px"}, "position": {"x": 12, "y": 854}}, "393049eb67ef6fee9f90775ca641ef66_2": {"style": {"width": "500px", "height": "221px", "borderColor": "rgba(45, 55, 75, 0.65)", "backgroundColor": "rgba(35, 45, 65, 0.1)"}, "position": {"x": 12, "y": 433}}, "622342a9691a63d287b21fe029f234da_1": {"style": {"width": "500px", "height": "221px", "borderColor": "rgba(86, 120, 255, 0.65)", "backgroundColor": "rgba(76, 110, 245, 0.1)"}, "position": {"x": 712, "y": 433}}, "bb20d3d19f17d65a6ae06272bcc6c400_1": {"style": {"width": "500px", "height": "221px", "borderColor": "rgba(144, 152, 160, 0.65)", "backgroundColor": "rgba(134, 142, 150, 0.1)"}, "position": {"x": 12, "y": 12}}, "32d245b57fc6466ec360267e689eb9fc_1find": {"style": {}, "position": {"x": -1, "y": -1}}, "393049eb67ef6fee9f90775ca641ef66_1poll": {"style": {"width": "300px", "height": "311.77777777777777px"}, "position": {"x": 100, "y": 120}}, "393049eb67ef6fee9f90775ca641ef66_2poll": {"style": {"width": "300px", "height": "311.77777777777777px"}, "position": {"x": 100, "y": 120}}, "622342a9691a63d287b21fe029f234da_1find": {"style": {}, "position": {"x": -1, "y": -1}}, "32d245b57fc6466ec360267e689eb9fc_1delete": {"style": {}, "position": {"x": -1, "y": -1}}, "32d245b57fc6466ec360267e689eb9fc_1insert": {"style": {}, "position": {"x": -1, "y": -1}}, "32d245b57fc6466ec360267e689eb9fc_1update": {"style": {}, "position": {"x": -1, "y": -1}}, "622342a9691a63d287b21fe029f234da_1delete": {"style": {}, "position": {"x": -1, "y": -1}}, "622342a9691a63d287b21fe029f234da_1insert": {"style": {}, "position": {"x": -1, "y": -1}}, "622342a9691a63d287b21fe029f234da_1update": {"style": {}, "position": {"x": -1, "y": -1}}, "32d245b57fc6466ec360267e689eb9fc_1findAll": {"style": {}, "position": {"x": -1, "y": -1}}, "622342a9691a63d287b21fe029f234da_1findAll": {"style": {}, "position": {"x": -1, "y": -1}}, "bb20d3d19f17d65a6ae06272bcc6c400_1addOrders": {"style": {"width": "300px", "height": "364px"}, "position": {"x": 100, "y": 120}}}, "HIGH": {"32d245b57fc6466ec360267e689eb9fc_1": {"style": {"width": "500px", "height": "591px", "borderColor": "rgba(28, 194, 144, 0.65)", "backgroundColor": "rgba(18, 184, 134, 0.1)"}, "position": {"x": 837, "y": 1508}}, "393049eb67ef6fee9f90775ca641ef66_1": {"style": {"width": "500px", "height": "531.7777777777778px"}, "position": {"x": 12, "y": 1528}}, "393049eb67ef6fee9f90775ca641ef66_2": {"style": {"width": "500px", "height": "531.7777777777778px"}, "position": {"x": 12, "y": 796}}, "622342a9691a63d287b21fe029f234da_1": {"style": {"width": "500px", "height": "591px", "borderColor": "rgba(86, 120, 255, 0.65)", "backgroundColor": "rgba(76, 110, 245, 0.1)"}, "position": {"x": 837, "y": 717}}, "bb20d3d19f17d65a6ae06272bcc6c400_1": {"style": {"width": "500px", "height": "584px"}, "position": {"x": 12, "y": 12}}, "32d245b57fc6466ec360267e689eb9fc_1find": {"style": {}, "position": {"x": -1, "y": -1}}, "393049eb67ef6fee9f90775ca641ef66_1poll": {"style": {"width": "300px", "height": "311.77777777777777px"}, "position": {"x": 100, "y": 120}}, "393049eb67ef6fee9f90775ca641ef66_2poll": {"style": {"width": "300px", "height": "311.77777777777777px"}, "position": {"x": 100, "y": 120}}, "622342a9691a63d287b21fe029f234da_1find": {"style": {}, "position": {"x": -1, "y": -1}}, "32d245b57fc6466ec360267e689eb9fc_1delete": {"style": {}, "position": {"x": -1, "y": -1}}, "32d245b57fc6466ec360267e689eb9fc_1insert": {"style": {}, "position": {"x": -1, "y": -1}}, "32d245b57fc6466ec360267e689eb9fc_1update": {"style": {}, "position": {"x": -1, "y": -1}}, "622342a9691a63d287b21fe029f234da_1delete": {"style": {}, "position": {"x": -1, "y": -1}}, "622342a9691a63d287b21fe029f234da_1insert": {"style": {}, "position": {"x": -1, "y": -1}}, "622342a9691a63d287b21fe029f234da_1update": {"style": {}, "position": {"x": -1, "y": -1}}, "32d245b57fc6466ec360267e689eb9fc_1findAll": {"style": {}, "position": {"x": -1, "y": -1}}, "622342a9691a63d287b21fe029f234da_1findAll": {"style": {}, "position": {"x": -1, "y": -1}}, "bb20d3d19f17d65a6ae06272bcc6c400_1addOrders": {"style": {"width": "300px", "height": "364px"}, "position": {"x": 100, "y": 120}}}, "MEDIUM": {"32d245b57fc6466ec360267e689eb9fc_1": {"style": {"width": "500px", "height": "591px", "borderColor": "rgba(28, 194, 144, 0.65)", "backgroundColor": "rgba(18, 184, 134, 0.1)"}, "position": {"x": 712, "y": 803}}, "393049eb67ef6fee9f90775ca641ef66_1": {"style": {"width": "500px", "height": "221px"}, "position": {"x": 12, "y": 988}}, "393049eb67ef6fee9f90775ca641ef66_2": {"style": {"width": "500px", "height": "221px", "borderColor": "rgba(45, 55, 75, 0.65)", "backgroundColor": "rgba(35, 45, 65, 0.1)"}, "position": {"x": 12, "y": 567}}, "622342a9691a63d287b21fe029f234da_1": {"style": {"width": "500px", "height": "591px", "borderColor": "rgba(86, 120, 255, 0.65)", "backgroundColor": "rgba(76, 110, 245, 0.1)"}, "position": {"x": 712, "y": 12}}, "bb20d3d19f17d65a6ae06272bcc6c400_1": {"style": {"width": "500px", "height": "221px", "borderColor": "rgba(144, 152, 160, 0.65)", "backgroundColor": "rgba(134, 142, 150, 0.1)"}, "position": {"x": 12, "y": 146}}, "32d245b57fc6466ec360267e689eb9fc_1find": {"style": {}, "position": {"x": -1, "y": -1}}, "393049eb67ef6fee9f90775ca641ef66_1poll": {"style": {"width": "300px", "height": "311.77777777777777px"}, "position": {"x": 100, "y": 120}}, "393049eb67ef6fee9f90775ca641ef66_2poll": {"style": {"width": "300px", "height": "311.77777777777777px"}, "position": {"x": 100, "y": 120}}, "622342a9691a63d287b21fe029f234da_1find": {"style": {}, "position": {"x": -1, "y": -1}}, "32d245b57fc6466ec360267e689eb9fc_1delete": {"style": {}, "position": {"x": -1, "y": -1}}, "32d245b57fc6466ec360267e689eb9fc_1insert": {"style": {}, "position": {"x": -1, "y": -1}}, "32d245b57fc6466ec360267e689eb9fc_1update": {"style": {}, "position": {"x": -1, "y": -1}}, "622342a9691a63d287b21fe029f234da_1delete": {"style": {}, "position": {"x": -1, "y": -1}}, "622342a9691a63d287b21fe029f234da_1insert": {"style": {}, "position": {"x": -1, "y": -1}}, "622342a9691a63d287b21fe029f234da_1update": {"style": {}, "position": {"x": -1, "y": -1}}, "32d245b57fc6466ec360267e689eb9fc_1findAll": {"style": {}, "position": {"x": -1, "y": -1}}, "622342a9691a63d287b21fe029f234da_1findAll": {"style": {}, "position": {"x": -1, "y": -1}}, "bb20d3d19f17d65a6ae06272bcc6c400_1addOrders": {"style": {"width": "300px", "height": "364px"}, "position": {"x": 100, "y": 120}}}}}, "project": [{"path": "app/order-service.ts", "type": "file", "value": "@Injectable\nclass OrderService {\n    ordersTable = std.resolve(OrdersTable);\n\n    constructor() {\n        std.flow(''Poller 1'', new Poller(), { every: 2 }).poll();\n        std.flow(''Poller 2'', new Poller(), { every: 2 }).poll();\n    }\n\n    addOrders(order: Omit<Order, ''createdAt''>) {\n        this.ordersTable.insert(order)\n    }\n}"}, {"path": "app/orders-table.ts", "type": "file", "value": "type Order = {\n    id: string,\n    thing: string,\n    status: ''pending'' | ''processing'' | ''done''\n    createdAt: number,\n}\n\n/**\n * Auto generated code for a relational db table.\n * \n * You can update this comment block and it will reflect\n * it as description on the playground!\n*/  \n@Injectable\n@Table([''id'', ''thing'', ''status'', ''createdAt''])\nclass OrdersTable {\n\n    @Show\n    data: Order[] = [];\n\n    insert(recordToInsert: Omit<Order, ''createdAt''>) {\n        const record: Order = {\n            ...recordToInsert,\n            createdAt: std.currentTick(),\n        };\n\n        this.data.push(record);\n        return record;\n    }\n\n    find(predicate: (record: Order) => boolean) {\n        return this.data.find(predicate);\n    }\n\n    findAll(predicate: (record: Order) => boolean) {\n        return this.data.filter(predicate);\n    }\n\n    update(\n        partialUpdate: Partial<Order>,\n        predicate: (record: Order) => boolean,\n    ) {\n        const indexOfRecord = this.data.findIndex(predicate);\n        if(indexOfRecord < 0) {\n            return;\n        }\n        const existingRecord = this.data[indexOfRecord];\n        const updatedRecord = {\n            ...existingRecord,\n            ...partialUpdate,\n        };\n    \n        this.data[indexOfRecord] = updatedRecord;\n\n        return updatedRecord;\n    }\n\n    delete(predicate: (record: Order) => boolean) {\n        const index = this.data.findIndex(predicate);\n        if(index < 0) {\n            return;\n        }\n        this.data.splice(index, 1);\n    }\n\n    \n\n}"}, {"path": "app/polling-table.ts", "type": "file", "value": "type OrderPoll = {\n    id: string,\n    order_id: string,\n    createdAt: number\n}\n\n/**\n * Auto generated code for a NoSQL collection.\n * \n * You can update this comment block and it will reflect\n * it as description on the playground!\n*/  \n@Injectable\n@Collection\nclass PollingCollection {\n\n    @Show\n    data: OrderPoll[] = [];\n\n    insert(recordToInsert: Omit<OrderPoll, ''createdAt''>) {\n        const record: OrderPoll = {\n            ...recordToInsert,\n            createdAt: std.currentTick(),\n        };\n\n        this.data.push(record);\n        return record;\n    }\n\n    find(predicate: (record: OrderPoll) => boolean) {\n        return this.data.find(predicate);\n    }\n\n    findAll(predicate: (record: OrderPoll) => boolean) {\n        return this.data.filter(predicate);\n    }\n\n    update(\n        partialUpdate: Partial<OrderPoll>,\n        predicate: (record: OrderPoll) => boolean,\n    ) {\n        const indexOfRecord = this.data.findIndex(predicate);\n        if(indexOfRecord < 0) {\n            return;\n        }\n        const existingRecord = this.data[indexOfRecord];\n        const updatedRecord = {\n            ...existingRecord,\n            ...partialUpdate,\n        };\n    \n        this.data[indexOfRecord] = updatedRecord;\n\n        return updatedRecord;\n    }\n\n    delete(predicate: (record: OrderPoll) => boolean) {\n        const index = this.data.findIndex(predicate);\n        if(index < 0) {\n            return;\n        }\n        this.data.splice(index, 1);\n    }\n\n}"}, {"path": "app/poller.ts", "type": "file", "value": "class Poller {\n    ordersTable = std.resolve(OrdersTable);\n    pollingCollection = std.resolve(PollingCollection);\n\n    poll() {\n        const updatedOrder = this.ordersTable.update(\n            {\n                status: ''processing''\n            },\n            std.lambda(order => order.status === ''pending'')\n        )\n        if(updatedOrder) {\n            std.log(''Got an order!'')\n            this.pollingCollection.insert({\n                id: `poll_${updatedOrder.id}`,\n                order_id: updatedOrder.id\n            });\n        }\n    }\n\n}"}], "storySetups": [{"id": "0", "title": "Parallel Polling", "script": {"raw": "std.flow(''Order enqueue'', std.resolve(OrderService), { after: 3 }).addOrders({\n    id: ''1'',\n    thing: ''A boat!'',\n    status: ''pending'',\n});", "compiled": "std.flow(''Order enqueue'', std.resolve(OrderService), { after: 3 }).addOrders({\n    id: ''1'',\n    thing: ''A boat!'',\n    status: ''pending'',\n});\n"}, "edgeMap": {}, "resolutionNodeMap": {"LOW": {"32d245b57fc6466ec360267e689eb9fc_1": {"position": {"x": 2019.6803069053713, "y": 399.84616368286447}}, "393049eb67ef6fee9f90775ca641ef66_1": {"iconData": {"iconString": "simple-icons:temporal", "iconColorVariant": "dark"}, "position": {"x": 1361.6718654092074, "y": 599.5324808184143}}, "393049eb67ef6fee9f90775ca641ef66_2": {"iconData": {"iconString": "simple-icons:temporal", "iconColorVariant": "dark"}, "position": {"x": 1356.7901534526857, "y": 233.31368286445013}, "backgroundColor": "#232D41"}, "bb20d3d19f17d65a6ae06272bcc6c400_1": {"iconData": {"iconString": "ri:amazon-fill", "iconColorVariant": "dark"}, "position": {"x": 40.27416879795402, "y": 432.5782608695652}, "backgroundColor": "#868e96"}, "393049eb67ef6fee9f90775ca641ef66_1poll": {"iconData": {"iconString": "fluent:timer-2-24-filled", "iconColorVariant": "dark"}}, "393049eb67ef6fee9f90775ca641ef66_2poll": {"iconData": {"iconString": "fluent:timer-2-24-filled", "iconColorVariant": "dark"}}, "bb20d3d19f17d65a6ae06272bcc6c400_1addOrders": {"iconData": {"iconString": "ic:round-local-grocery-store", "iconColorVariant": "dark"}}}, "HIGH": {"32d245b57fc6466ec360267e689eb9fc_1": {"position": {"x": 2095.094309467426, "y": 19.37167657127611}}, "393049eb67ef6fee9f90775ca641ef66_1": {"iconData": {"iconString": "simple-icons:temporal", "iconColorVariant": "dark"}, "position": {"x": 1361.9486167780549, "y": 323.442562707559}}, "393049eb67ef6fee9f90775ca641ef66_2": {"iconData": {"iconString": "simple-icons:temporal", "iconColorVariant": "dark"}, "position": {"x": 1366.5436753967, "y": -278.49864225456867}, "backgroundColor": "#232D41"}, "48040ad699888041e84014c90e44dfcc_1": {"position": {"x": 2183.536914139381, "y": 2.8147215271416144}}, "622342a9691a63d287b21fe029f234da_1": {"style": {"width": "662px", "height": "591px"}, "position": {"x": 667.8417855061138, "y": 18.3411505859724}}, "bb20d3d19f17d65a6ae06272bcc6c400_1": {"iconData": {"iconString": "ri:amazon-fill", "iconColorVariant": "dark"}, "backgroundColor": "#868e96"}, "e8e439990152525137976a0a9849970b_1": {"position": {"x": 1430.0172437631345, "y": 319.03399355439046}}, "e8e439990152525137976a0a9849970b_2": {"position": {"x": 1427.608351929473, "y": -272.4886625448623}}, "393049eb67ef6fee9f90775ca641ef66_1poll": {"iconData": {"iconString": "fluent:timer-2-24-filled", "iconColorVariant": "dark"}}, "393049eb67ef6fee9f90775ca641ef66_2poll": {"iconData": {"iconString": "fluent:timer-2-24-filled", "iconColorVariant": "dark"}}, "bb20d3d19f17d65a6ae06272bcc6c400_1addOrders": {"iconData": {"iconString": "ic:round-local-grocery-store", "iconColorVariant": "dark"}}}, "MEDIUM": {"32d245b57fc6466ec360267e689eb9fc_1": {"position": {"x": 1984.8692742966757, "y": 19.57212276214824}}, "393049eb67ef6fee9f90775ca641ef66_1": {"iconData": {"iconString": "simple-icons:temporal", "iconColorVariant": "dark"}, "position": {"x": 1326.137084398977, "y": 360.79820971867014}}, "393049eb67ef6fee9f90775ca641ef66_2": {"iconData": {"iconString": "simple-icons:temporal", "iconColorVariant": "dark"}, "position": {"x": 1326.137084398977, "y": 56.967774936061346}, "backgroundColor": "#232D41"}, "bb20d3d19f17d65a6ae06272bcc6c400_1": {"iconData": {"iconString": "ri:amazon-fill", "iconColorVariant": "dark"}, "position": {"x": 14.297442455242958, "y": 196.5437340153453}, "backgroundColor": "#868e96"}, "393049eb67ef6fee9f90775ca641ef66_1poll": {"iconData": {"iconString": "fluent:timer-2-24-filled", "iconColorVariant": "dark"}}, "393049eb67ef6fee9f90775ca641ef66_2poll": {"iconData": {"iconString": "fluent:timer-2-24-filled", "iconColorVariant": "dark"}}, "bb20d3d19f17d65a6ae06272bcc6c400_1addOrders": {"iconData": {"iconString": "ic:round-local-grocery-store", "iconColorVariant": "dark"}}}}}]}');
